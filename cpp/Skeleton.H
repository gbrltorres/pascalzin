/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef SKELETON_HEADER
#define SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"


class Skeleton : public Visitor
{
public:
  void visitEntry(Entry *p);
  void visitBlocoDefinicoes(BlocoDefinicoes *p);
  void visitBlocoFuncaoEProc(BlocoFuncaoEProc *p);
  void visitBlocoConstante(BlocoConstante *p);
  void visitRegraBlocoConstante(RegraBlocoConstante *p);
  void visitBlocoTipo(BlocoTipo *p);
  void visitRegraBlocoTipo(RegraBlocoTipo *p);
  void visitBlocoVar(BlocoVar *p);
  void visitRegraBlocoVar(RegraBlocoVar *p);
  void visitBlocoComando(BlocoComando *p);
  void visitRegraComando(RegraComando *p);
  void visitComando(Comando *p);
  void visitAtribuicao(Atribuicao *p);
  void visitSubEscrito(SubEscrito *p);
  void visitRegraTipo(RegraTipo *p);
  void visitTipoPrimitivo(TipoPrimitivo *p);
  void visitValor(Valor *p);
  void visitTipoDerivado(TipoDerivado *p);
  void visitPonteiro(Ponteiro *p);
  void visitVetor(Vetor *p);
  void visitIf(If *p);
  void visitWhile(While *p);
  void visitFor(For *p);
  void visitGoto(Goto *p);
  void visitRotulo(Rotulo *p);
  void visitStruct(Struct *p);
  void visitDefinicaoCampoStruct(DefinicaoCampoStruct *p);
  void visitAtribuicaoStruct(AtribuicaoStruct *p);
  void visitOperadorRelacional(OperadorRelacional *p);
  void visitOperadorLogico(OperadorLogico *p);
  void visitNegacao(Negacao *p);
  void visitOperadorAritmetico(OperadorAritmetico *p);
  void visitCase(Case *p);
  void visitRegraSeletor(RegraSeletor *p);
  void visitSeletor(Seletor *p);
  void visitChamadaFuncaoEProc(ChamadaFuncaoEProc *p);
  void visitListaIdent(ListaIdent *p);
  void visitFuncao(Funcao *p);
  void visitProcedimento(Procedimento *p);
  void visitExpressaoAritmetica(ExpressaoAritmetica *p);
  void visitOperando(Operando *p);
  void visitRegraAritmetica(RegraAritmetica *p);
  void visitExpressaoRelacional(ExpressaoRelacional *p);
  void visitRegraRelacional(RegraRelacional *p);
  void visitExpressaoLogica(ExpressaoLogica *p);
  void visitRegraLogico(RegraLogico *p);
  void visitLEntry(LEntry *p);
  void visitBlocoDefinicoes1(BlocoDefinicoes1 *p);
  void visitBlocoDefinicoes2(BlocoDefinicoes2 *p);
  void visitBlocoDefinicoes3(BlocoDefinicoes3 *p);
  void visitBlocoDefinicoes4(BlocoDefinicoes4 *p);
  void visitBlocoDefinicoes_(BlocoDefinicoes_ *p);
  void visitBlocoFuncaoEProcFuncao(BlocoFuncaoEProcFuncao *p);
  void visitBlocoFuncaoEProc1(BlocoFuncaoEProc1 *p);
  void visitBlocoFuncaoEProcProcedimento(BlocoFuncaoEProcProcedimento *p);
  void visitBlocoFuncaoEProc2(BlocoFuncaoEProc2 *p);
  void visitBlocoFuncaoEProc_(BlocoFuncaoEProc_ *p);
  void visitBlocoConstante1(BlocoConstante1 *p);
  void visitBlocoConstante_(BlocoConstante_ *p);
  void visitRegraBlocoConstante1(RegraBlocoConstante1 *p);
  void visitRegraBlocoConstante2(RegraBlocoConstante2 *p);
  void visitBlocoTipo1(BlocoTipo1 *p);
  void visitBlocoTipo_(BlocoTipo_ *p);
  void visitRegraBlocoTipo1(RegraBlocoTipo1 *p);
  void visitRegraBlocoTipo2(RegraBlocoTipo2 *p);
  void visitBlocoVar1(BlocoVar1 *p);
  void visitBlocoVar_(BlocoVar_ *p);
  void visitRegraBlocoVar1(RegraBlocoVar1 *p);
  void visitRegraBlocoVar2(RegraBlocoVar2 *p);
  void visitRegraBlocoVar3(RegraBlocoVar3 *p);
  void visitRegraBlocoVar4(RegraBlocoVar4 *p);
  void visitBlocoComando1(BlocoComando1 *p);
  void visitBlocoComando_(BlocoComando_ *p);
  void visitRegraComando1(RegraComando1 *p);
  void visitRegraComando2(RegraComando2 *p);
  void visitComandoAtribuicao(ComandoAtribuicao *p);
  void visitComandoIf(ComandoIf *p);
  void visitComandoWhile(ComandoWhile *p);
  void visitComandoFor(ComandoFor *p);
  void visitComandoGoto(ComandoGoto *p);
  void visitComandoCase(ComandoCase *p);
  void visitComandoChamadaFuncaoEProc(ComandoChamadaFuncaoEProc *p);
  void visitAtribuicao1(Atribuicao1 *p);
  void visitAtribuicao2(Atribuicao2 *p);
  void visitAtribuicao3(Atribuicao3 *p);
  void visitAtribuicao4(Atribuicao4 *p);
  void visitAtribuicaoAtribuicaoStruct(AtribuicaoAtribuicaoStruct *p);
  void visitAtribuicao5(Atribuicao5 *p);
  void visitSubEscritoIdent(SubEscritoIdent *p);
  void visitSubEscritoInteger(SubEscritoInteger *p);
  void visitRegraTipoTipoPrimitivo(RegraTipoTipoPrimitivo *p);
  void visitRegraTipoTipoDerivado(RegraTipoTipoDerivado *p);
  void visitRegraTipoIdent(RegraTipoIdent *p);
  void visitTipoPrimitivo_int(TipoPrimitivo_int *p);
  void visitTipoPrimitivo_real(TipoPrimitivo_real *p);
  void visitTipoPrimitivo_char(TipoPrimitivo_char *p);
  void visitValorInteger(ValorInteger *p);
  void visitValorDouble(ValorDouble *p);
  void visitValorChar(ValorChar *p);
  void visitValorString(ValorString *p);
  void visitValorExpressaoAritmetica(ValorExpressaoAritmetica *p);
  void visitTipoDerivadoPonteiro(TipoDerivadoPonteiro *p);
  void visitTipoDerivadoVetor(TipoDerivadoVetor *p);
  void visitTipoDerivadoStruct(TipoDerivadoStruct *p);
  void visitPonteiro1(Ponteiro1 *p);
  void visitPonteiro2(Ponteiro2 *p);
  void visitLVetor(LVetor *p);
  void visitIf1(If1 *p);
  void visitIf2(If2 *p);
  void visitLWhile(LWhile *p);
  void visitFor1(For1 *p);
  void visitFor2(For2 *p);
  void visitLGoto(LGoto *p);
  void visitLRotulo(LRotulo *p);
  void visitLStruct(LStruct *p);
  void visitDefinicaoCampoStruct1(DefinicaoCampoStruct1 *p);
  void visitDefinicaoCampoStruct2(DefinicaoCampoStruct2 *p);
  void visitAtribuicaoStruct1(AtribuicaoStruct1 *p);
  void visitAtribuicaoStruct2(AtribuicaoStruct2 *p);
  void visitOperadorRelacional1(OperadorRelacional1 *p);
  void visitOperadorRelacional2(OperadorRelacional2 *p);
  void visitOperadorRelacional3(OperadorRelacional3 *p);
  void visitOperadorRelacional4(OperadorRelacional4 *p);
  void visitOperadorRelacional5(OperadorRelacional5 *p);
  void visitOperadorRelacional6(OperadorRelacional6 *p);
  void visitOperadorLogico1(OperadorLogico1 *p);
  void visitOperadorLogico2(OperadorLogico2 *p);
  void visitOperadorLogico3(OperadorLogico3 *p);
  void visitOperadorLogicoNegacao(OperadorLogicoNegacao *p);
  void visitLNegacao(LNegacao *p);
  void visitOperadorAritmetico1(OperadorAritmetico1 *p);
  void visitOperadorAritmetico2(OperadorAritmetico2 *p);
  void visitOperadorAritmetico3(OperadorAritmetico3 *p);
  void visitOperadorAritmetico4(OperadorAritmetico4 *p);
  void visitLCase(LCase *p);
  void visitRegraSeletor1(RegraSeletor1 *p);
  void visitRegraSeletor2(RegraSeletor2 *p);
  void visitSeletorInteger(SeletorInteger *p);
  void visitSeletorChar(SeletorChar *p);
  void visitSeletorIdent(SeletorIdent *p);
  void visitLChamad(LChamad *p);
  void visitListaIdentIdent(ListaIdentIdent *p);
  void visitListaIdent1(ListaIdent1 *p);
  void visitLFuncao(LFuncao *p);
  void visitProcedimento1(Procedimento1 *p);
  void visitProcedimento2(Procedimento2 *p);
  void visitExpAr(ExpAr *p);
  void visitOperandoInteger(OperandoInteger *p);
  void visitOperandoDouble(OperandoDouble *p);
  void visitOperandoIdent(OperandoIdent *p);
  void visitRegraAritmetica1(RegraAritmetica1 *p);
  void visitRegraAritmetica2(RegraAritmetica2 *p);
  void visitExpressaoRelacionalOperando(ExpressaoRelacionalOperando *p);
  void visitExpressaoRelacional1(ExpressaoRelacional1 *p);
  void visitExpressaoRelacional2(ExpressaoRelacional2 *p);
  void visitRegraRelacional1(RegraRelacional1 *p);
  void visitRegraRelacional2(RegraRelacional2 *p);
  void visitExpressaoLogica_falso(ExpressaoLogica_falso *p);
  void visitExpressaoLogica1(ExpressaoLogica1 *p);
  void visitExpressaoLogica_verdadeiro(ExpressaoLogica_verdadeiro *p);
  void visitExpressaoLogica2(ExpressaoLogica2 *p);
  void visitExpressaoLogicaExpressaoRelacional(ExpressaoLogicaExpressaoRelacional *p);
  void visitExpressaoLogica3(ExpressaoLogica3 *p);
  void visitExpressaoLogica4(ExpressaoLogica4 *p);
  void visitExpressaoLogica5(ExpressaoLogica5 *p);
  void visitRegraLogico1(RegraLogico1 *p);
  void visitRegraLogico2(RegraLogico2 *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};


#endif
