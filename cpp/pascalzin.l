/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4). */

/* Lexer definition for use with FLex */

%option noyywrap noinput nounput
%option reentrant bison-bridge bison-locations

/* Additional data for the lexer: a buffer for lexing string literals. */
%option extra-type="Buffer"

%{
#include "Absyn.H"
#include "Bison.H"

#define initialize_lexer pascalzin__initialize_lexer

/* BEGIN extensible string buffer */

#include "Buffer.H"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
#define literal_buffer yyextra

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START CHAR CHARESC CHAREND STRING ESCAPED

%%  /* Rules. */

<INITIAL>";"      	 return _SEMI;
<INITIAL>"."      	 return _DOT;
<INITIAL>"="      	 return _EQ;
<INITIAL>":"      	 return _COLON;
<INITIAL>":="      	 return _COLONEQ;
<INITIAL>"["      	 return _LBRACK;
<INITIAL>"]"      	 return _RBRACK;
<INITIAL>"^"      	 return _CARET;
<INITIAL>".."      	 return _DDOT;
<INITIAL>"("      	 return _LPAREN;
<INITIAL>")"      	 return _RPAREN;
<INITIAL>">"      	 return _GT;
<INITIAL>"<"      	 return _LT;
<INITIAL>"<>"      	 return _LTGT;
<INITIAL>">="      	 return _GTEQ;
<INITIAL>"<="      	 return _LDARROW;
<INITIAL>"&&"      	 return _DAMP;
<INITIAL>"||"      	 return _DBAR;
<INITIAL>"&|"      	 return _SYMB_18;
<INITIAL>"!"      	 return _BANG;
<INITIAL>"+"      	 return _PLUS;
<INITIAL>"-"      	 return _MINUS;
<INITIAL>"*"      	 return _STAR;
<INITIAL>"/"      	 return _SLASH;
<INITIAL>","      	 return _COMMA;
<INITIAL>"ate"      	 return _KW_ate;
<INITIAL>"caso"      	 return _KW_caso;
<INITIAL>"char"      	 return _KW_char;
<INITIAL>"const"      	 return _KW_const;
<INITIAL>"de"      	 return _KW_de;
<INITIAL>"enquanto"      	 return _KW_enquanto;
<INITIAL>"entao"      	 return _KW_entao;
<INITIAL>"faca"      	 return _KW_faca;
<INITIAL>"falso"      	 return _KW_falso;
<INITIAL>"fim"      	 return _KW_fim;
<INITIAL>"funcao"      	 return _KW_funcao;
<INITIAL>"inicio"      	 return _KW_inicio;
<INITIAL>"int"      	 return _KW_int;
<INITIAL>"para"      	 return _KW_para;
<INITIAL>"procedimento"      	 return _KW_procedimento;
<INITIAL>"programa"      	 return _KW_programa;
<INITIAL>"real"      	 return _KW_real;
<INITIAL>"registro"      	 return _KW_registro;
<INITIAL>"se"      	 return _KW_se;
<INITIAL>"senao"      	 return _KW_senao;
<INITIAL>"sovai"      	 return _KW_sovai;
<INITIAL>"tipo"      	 return _KW_tipo;
<INITIAL>"var"      	 return _KW_var;
<INITIAL>"verdadeiro"      	 return _KW_verdadeiro;
<INITIAL>"vetor"      	 return _KW_vetor;



<INITIAL>"\""        	 LITERAL_BUFFER_CREATE(); BEGIN STRING;
<STRING>\\             	 BEGIN ESCAPED;
<STRING>\"             	 yylval->_string = LITERAL_BUFFER_HARVEST(); BEGIN INITIAL; return _STRING_;
<STRING>.              	 LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
<ESCAPED>f             	 LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
<ESCAPED>n             	 LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
<ESCAPED>r             	 LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
<ESCAPED>t             	 LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
<ESCAPED>\"            	 LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
<ESCAPED>\\            	 LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
<ESCAPED>.             	 LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
<STRING,ESCAPED><<EOF>>	 LITERAL_BUFFER_FREE(); return _ERROR_;
<INITIAL>"'" 	BEGIN CHAR;
<CHAR>\\      	 BEGIN CHARESC;
<CHAR>[^']      	 BEGIN CHAREND; yylval->_char = yytext[0]; return _CHAR_;
<CHARESC>f      	 BEGIN CHAREND; yylval->_char = '\f';     return _CHAR_;
<CHARESC>n      	 BEGIN CHAREND; yylval->_char = '\n';     return _CHAR_;
<CHARESC>r      	 BEGIN CHAREND; yylval->_char = '\r';     return _CHAR_;
<CHARESC>t      	 BEGIN CHAREND; yylval->_char = '\t';     return _CHAR_;
<CHARESC>.      	 BEGIN CHAREND; yylval->_char = yytext[0]; return _CHAR_;
<CHAREND>"'"      	 BEGIN INITIAL;
<INITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval->_double = atof(yytext); return _DOUBLE_;
<INITIAL>{DIGIT}+      	 yylval->_int = atoi(yytext); return _INTEGER_;
<INITIAL>{LETTER}{IDENT}*      	 yylval->_string = strdup(yytext); return _IDENT_;
<INITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<INITIAL>.      	 return _ERROR_;

%%  /* Initialization code. */

yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}

