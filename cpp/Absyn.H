/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Entry;
class BlocoDefinicoes;
class BlocoFuncaoEProc;
class BlocoConstante;
class RegraBlocoConstante;
class BlocoTipo;
class RegraBlocoTipo;
class BlocoVar;
class RegraBlocoVar;
class BlocoComando;
class RegraComando;
class Comando;
class Atribuicao;
class SubEscrito;
class RegraTipo;
class TipoPrimitivo;
class Valor;
class TipoDerivado;
class Ponteiro;
class Vetor;
class If;
class While;
class For;
class Goto;
class Rotulo;
class Struct;
class DefinicaoCampoStruct;
class AtribuicaoStruct;
class OperadorRelacional;
class OperadorLogico;
class Negacao;
class OperadorAritmetico;
class Case;
class RegraSeletor;
class Seletor;
class ChamadaFuncaoEProc;
class ListaIdent;
class Funcao;
class Procedimento;
class ExpressaoAritmetica;
class Operando;
class RegraAritmetica;
class ExpressaoRelacional;
class RegraRelacional;
class ExpressaoLogica;
class RegraLogico;
class LEntry;
class BlocoDefinicoes1;
class BlocoDefinicoes2;
class BlocoDefinicoes3;
class BlocoDefinicoes4;
class BlocoDefinicoes_;
class BlocoFuncaoEProcFuncao;
class BlocoFuncaoEProc1;
class BlocoFuncaoEProcProcedimento;
class BlocoFuncaoEProc2;
class BlocoFuncaoEProc_;
class BlocoConstante1;
class BlocoConstante_;
class RegraBlocoConstante1;
class RegraBlocoConstante2;
class BlocoTipo1;
class BlocoTipo_;
class RegraBlocoTipo1;
class RegraBlocoTipo2;
class BlocoVar1;
class BlocoVar_;
class RegraBlocoVar1;
class RegraBlocoVar2;
class RegraBlocoVar3;
class RegraBlocoVar4;
class BlocoComando1;
class BlocoComando_;
class RegraComando1;
class RegraComando2;
class ComandoAtribuicao;
class ComandoIf;
class ComandoWhile;
class ComandoFor;
class ComandoGoto;
class ComandoCase;
class ComandoChamadaFuncaoEProc;
class Atribuicao1;
class Atribuicao2;
class Atribuicao3;
class Atribuicao4;
class AtribuicaoAtribuicaoStruct;
class Atribuicao5;
class SubEscritoIdent;
class SubEscritoInteger;
class RegraTipoTipoPrimitivo;
class RegraTipoTipoDerivado;
class RegraTipoIdent;
class TipoPrimitivo_int;
class TipoPrimitivo_real;
class TipoPrimitivo_char;
class ValorInteger;
class ValorDouble;
class ValorChar;
class ValorString;
class ValorExpressaoAritmetica;
class TipoDerivadoPonteiro;
class TipoDerivadoVetor;
class TipoDerivadoStruct;
class Ponteiro1;
class Ponteiro2;
class LVetor;
class If1;
class If2;
class LWhile;
class For1;
class For2;
class LGoto;
class LRotulo;
class LStruct;
class DefinicaoCampoStruct1;
class DefinicaoCampoStruct2;
class AtribuicaoStruct1;
class AtribuicaoStruct2;
class OperadorRelacional1;
class OperadorRelacional2;
class OperadorRelacional3;
class OperadorRelacional4;
class OperadorRelacional5;
class OperadorRelacional6;
class OperadorLogico1;
class OperadorLogico2;
class OperadorLogico3;
class OperadorLogicoNegacao;
class LNegacao;
class OperadorAritmetico1;
class OperadorAritmetico2;
class OperadorAritmetico3;
class OperadorAritmetico4;
class LCase;
class RegraSeletor1;
class RegraSeletor2;
class SeletorInteger;
class SeletorChar;
class SeletorIdent;
class LChamad;
class ListaIdentIdent;
class ListaIdent1;
class LFuncao;
class Procedimento1;
class Procedimento2;
class ExpAr;
class OperandoInteger;
class OperandoDouble;
class OperandoIdent;
class RegraAritmetica1;
class RegraAritmetica2;
class ExpressaoRelacionalOperando;
class ExpressaoRelacional1;
class ExpressaoRelacional2;
class RegraRelacional1;
class RegraRelacional2;
class ExpressaoLogica_falso;
class ExpressaoLogica1;
class ExpressaoLogica_verdadeiro;
class ExpressaoLogica2;
class ExpressaoLogicaExpressaoRelacional;
class ExpressaoLogica3;
class ExpressaoLogica4;
class ExpressaoLogica5;
class RegraLogico1;
class RegraLogico2;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitEntry(Entry *p) = 0;
  virtual void visitBlocoDefinicoes(BlocoDefinicoes *p) = 0;
  virtual void visitBlocoFuncaoEProc(BlocoFuncaoEProc *p) = 0;
  virtual void visitBlocoConstante(BlocoConstante *p) = 0;
  virtual void visitRegraBlocoConstante(RegraBlocoConstante *p) = 0;
  virtual void visitBlocoTipo(BlocoTipo *p) = 0;
  virtual void visitRegraBlocoTipo(RegraBlocoTipo *p) = 0;
  virtual void visitBlocoVar(BlocoVar *p) = 0;
  virtual void visitRegraBlocoVar(RegraBlocoVar *p) = 0;
  virtual void visitBlocoComando(BlocoComando *p) = 0;
  virtual void visitRegraComando(RegraComando *p) = 0;
  virtual void visitComando(Comando *p) = 0;
  virtual void visitAtribuicao(Atribuicao *p) = 0;
  virtual void visitSubEscrito(SubEscrito *p) = 0;
  virtual void visitRegraTipo(RegraTipo *p) = 0;
  virtual void visitTipoPrimitivo(TipoPrimitivo *p) = 0;
  virtual void visitValor(Valor *p) = 0;
  virtual void visitTipoDerivado(TipoDerivado *p) = 0;
  virtual void visitPonteiro(Ponteiro *p) = 0;
  virtual void visitVetor(Vetor *p) = 0;
  virtual void visitIf(If *p) = 0;
  virtual void visitWhile(While *p) = 0;
  virtual void visitFor(For *p) = 0;
  virtual void visitGoto(Goto *p) = 0;
  virtual void visitRotulo(Rotulo *p) = 0;
  virtual void visitStruct(Struct *p) = 0;
  virtual void visitDefinicaoCampoStruct(DefinicaoCampoStruct *p) = 0;
  virtual void visitAtribuicaoStruct(AtribuicaoStruct *p) = 0;
  virtual void visitOperadorRelacional(OperadorRelacional *p) = 0;
  virtual void visitOperadorLogico(OperadorLogico *p) = 0;
  virtual void visitNegacao(Negacao *p) = 0;
  virtual void visitOperadorAritmetico(OperadorAritmetico *p) = 0;
  virtual void visitCase(Case *p) = 0;
  virtual void visitRegraSeletor(RegraSeletor *p) = 0;
  virtual void visitSeletor(Seletor *p) = 0;
  virtual void visitChamadaFuncaoEProc(ChamadaFuncaoEProc *p) = 0;
  virtual void visitListaIdent(ListaIdent *p) = 0;
  virtual void visitFuncao(Funcao *p) = 0;
  virtual void visitProcedimento(Procedimento *p) = 0;
  virtual void visitExpressaoAritmetica(ExpressaoAritmetica *p) = 0;
  virtual void visitOperando(Operando *p) = 0;
  virtual void visitRegraAritmetica(RegraAritmetica *p) = 0;
  virtual void visitExpressaoRelacional(ExpressaoRelacional *p) = 0;
  virtual void visitRegraRelacional(RegraRelacional *p) = 0;
  virtual void visitExpressaoLogica(ExpressaoLogica *p) = 0;
  virtual void visitRegraLogico(RegraLogico *p) = 0;
  virtual void visitLEntry(LEntry *p) = 0;
  virtual void visitBlocoDefinicoes1(BlocoDefinicoes1 *p) = 0;
  virtual void visitBlocoDefinicoes2(BlocoDefinicoes2 *p) = 0;
  virtual void visitBlocoDefinicoes3(BlocoDefinicoes3 *p) = 0;
  virtual void visitBlocoDefinicoes4(BlocoDefinicoes4 *p) = 0;
  virtual void visitBlocoDefinicoes_(BlocoDefinicoes_ *p) = 0;
  virtual void visitBlocoFuncaoEProcFuncao(BlocoFuncaoEProcFuncao *p) = 0;
  virtual void visitBlocoFuncaoEProc1(BlocoFuncaoEProc1 *p) = 0;
  virtual void visitBlocoFuncaoEProcProcedimento(BlocoFuncaoEProcProcedimento *p) = 0;
  virtual void visitBlocoFuncaoEProc2(BlocoFuncaoEProc2 *p) = 0;
  virtual void visitBlocoFuncaoEProc_(BlocoFuncaoEProc_ *p) = 0;
  virtual void visitBlocoConstante1(BlocoConstante1 *p) = 0;
  virtual void visitBlocoConstante_(BlocoConstante_ *p) = 0;
  virtual void visitRegraBlocoConstante1(RegraBlocoConstante1 *p) = 0;
  virtual void visitRegraBlocoConstante2(RegraBlocoConstante2 *p) = 0;
  virtual void visitBlocoTipo1(BlocoTipo1 *p) = 0;
  virtual void visitBlocoTipo_(BlocoTipo_ *p) = 0;
  virtual void visitRegraBlocoTipo1(RegraBlocoTipo1 *p) = 0;
  virtual void visitRegraBlocoTipo2(RegraBlocoTipo2 *p) = 0;
  virtual void visitBlocoVar1(BlocoVar1 *p) = 0;
  virtual void visitBlocoVar_(BlocoVar_ *p) = 0;
  virtual void visitRegraBlocoVar1(RegraBlocoVar1 *p) = 0;
  virtual void visitRegraBlocoVar2(RegraBlocoVar2 *p) = 0;
  virtual void visitRegraBlocoVar3(RegraBlocoVar3 *p) = 0;
  virtual void visitRegraBlocoVar4(RegraBlocoVar4 *p) = 0;
  virtual void visitBlocoComando1(BlocoComando1 *p) = 0;
  virtual void visitBlocoComando_(BlocoComando_ *p) = 0;
  virtual void visitRegraComando1(RegraComando1 *p) = 0;
  virtual void visitRegraComando2(RegraComando2 *p) = 0;
  virtual void visitComandoAtribuicao(ComandoAtribuicao *p) = 0;
  virtual void visitComandoIf(ComandoIf *p) = 0;
  virtual void visitComandoWhile(ComandoWhile *p) = 0;
  virtual void visitComandoFor(ComandoFor *p) = 0;
  virtual void visitComandoGoto(ComandoGoto *p) = 0;
  virtual void visitComandoCase(ComandoCase *p) = 0;
  virtual void visitComandoChamadaFuncaoEProc(ComandoChamadaFuncaoEProc *p) = 0;
  virtual void visitAtribuicao1(Atribuicao1 *p) = 0;
  virtual void visitAtribuicao2(Atribuicao2 *p) = 0;
  virtual void visitAtribuicao3(Atribuicao3 *p) = 0;
  virtual void visitAtribuicao4(Atribuicao4 *p) = 0;
  virtual void visitAtribuicaoAtribuicaoStruct(AtribuicaoAtribuicaoStruct *p) = 0;
  virtual void visitAtribuicao5(Atribuicao5 *p) = 0;
  virtual void visitSubEscritoIdent(SubEscritoIdent *p) = 0;
  virtual void visitSubEscritoInteger(SubEscritoInteger *p) = 0;
  virtual void visitRegraTipoTipoPrimitivo(RegraTipoTipoPrimitivo *p) = 0;
  virtual void visitRegraTipoTipoDerivado(RegraTipoTipoDerivado *p) = 0;
  virtual void visitRegraTipoIdent(RegraTipoIdent *p) = 0;
  virtual void visitTipoPrimitivo_int(TipoPrimitivo_int *p) = 0;
  virtual void visitTipoPrimitivo_real(TipoPrimitivo_real *p) = 0;
  virtual void visitTipoPrimitivo_char(TipoPrimitivo_char *p) = 0;
  virtual void visitValorInteger(ValorInteger *p) = 0;
  virtual void visitValorDouble(ValorDouble *p) = 0;
  virtual void visitValorChar(ValorChar *p) = 0;
  virtual void visitValorString(ValorString *p) = 0;
  virtual void visitValorExpressaoAritmetica(ValorExpressaoAritmetica *p) = 0;
  virtual void visitTipoDerivadoPonteiro(TipoDerivadoPonteiro *p) = 0;
  virtual void visitTipoDerivadoVetor(TipoDerivadoVetor *p) = 0;
  virtual void visitTipoDerivadoStruct(TipoDerivadoStruct *p) = 0;
  virtual void visitPonteiro1(Ponteiro1 *p) = 0;
  virtual void visitPonteiro2(Ponteiro2 *p) = 0;
  virtual void visitLVetor(LVetor *p) = 0;
  virtual void visitIf1(If1 *p) = 0;
  virtual void visitIf2(If2 *p) = 0;
  virtual void visitLWhile(LWhile *p) = 0;
  virtual void visitFor1(For1 *p) = 0;
  virtual void visitFor2(For2 *p) = 0;
  virtual void visitLGoto(LGoto *p) = 0;
  virtual void visitLRotulo(LRotulo *p) = 0;
  virtual void visitLStruct(LStruct *p) = 0;
  virtual void visitDefinicaoCampoStruct1(DefinicaoCampoStruct1 *p) = 0;
  virtual void visitDefinicaoCampoStruct2(DefinicaoCampoStruct2 *p) = 0;
  virtual void visitAtribuicaoStruct1(AtribuicaoStruct1 *p) = 0;
  virtual void visitAtribuicaoStruct2(AtribuicaoStruct2 *p) = 0;
  virtual void visitOperadorRelacional1(OperadorRelacional1 *p) = 0;
  virtual void visitOperadorRelacional2(OperadorRelacional2 *p) = 0;
  virtual void visitOperadorRelacional3(OperadorRelacional3 *p) = 0;
  virtual void visitOperadorRelacional4(OperadorRelacional4 *p) = 0;
  virtual void visitOperadorRelacional5(OperadorRelacional5 *p) = 0;
  virtual void visitOperadorRelacional6(OperadorRelacional6 *p) = 0;
  virtual void visitOperadorLogico1(OperadorLogico1 *p) = 0;
  virtual void visitOperadorLogico2(OperadorLogico2 *p) = 0;
  virtual void visitOperadorLogico3(OperadorLogico3 *p) = 0;
  virtual void visitOperadorLogicoNegacao(OperadorLogicoNegacao *p) = 0;
  virtual void visitLNegacao(LNegacao *p) = 0;
  virtual void visitOperadorAritmetico1(OperadorAritmetico1 *p) = 0;
  virtual void visitOperadorAritmetico2(OperadorAritmetico2 *p) = 0;
  virtual void visitOperadorAritmetico3(OperadorAritmetico3 *p) = 0;
  virtual void visitOperadorAritmetico4(OperadorAritmetico4 *p) = 0;
  virtual void visitLCase(LCase *p) = 0;
  virtual void visitRegraSeletor1(RegraSeletor1 *p) = 0;
  virtual void visitRegraSeletor2(RegraSeletor2 *p) = 0;
  virtual void visitSeletorInteger(SeletorInteger *p) = 0;
  virtual void visitSeletorChar(SeletorChar *p) = 0;
  virtual void visitSeletorIdent(SeletorIdent *p) = 0;
  virtual void visitLChamad(LChamad *p) = 0;
  virtual void visitListaIdentIdent(ListaIdentIdent *p) = 0;
  virtual void visitListaIdent1(ListaIdent1 *p) = 0;
  virtual void visitLFuncao(LFuncao *p) = 0;
  virtual void visitProcedimento1(Procedimento1 *p) = 0;
  virtual void visitProcedimento2(Procedimento2 *p) = 0;
  virtual void visitExpAr(ExpAr *p) = 0;
  virtual void visitOperandoInteger(OperandoInteger *p) = 0;
  virtual void visitOperandoDouble(OperandoDouble *p) = 0;
  virtual void visitOperandoIdent(OperandoIdent *p) = 0;
  virtual void visitRegraAritmetica1(RegraAritmetica1 *p) = 0;
  virtual void visitRegraAritmetica2(RegraAritmetica2 *p) = 0;
  virtual void visitExpressaoRelacionalOperando(ExpressaoRelacionalOperando *p) = 0;
  virtual void visitExpressaoRelacional1(ExpressaoRelacional1 *p) = 0;
  virtual void visitExpressaoRelacional2(ExpressaoRelacional2 *p) = 0;
  virtual void visitRegraRelacional1(RegraRelacional1 *p) = 0;
  virtual void visitRegraRelacional2(RegraRelacional2 *p) = 0;
  virtual void visitExpressaoLogica_falso(ExpressaoLogica_falso *p) = 0;
  virtual void visitExpressaoLogica1(ExpressaoLogica1 *p) = 0;
  virtual void visitExpressaoLogica_verdadeiro(ExpressaoLogica_verdadeiro *p) = 0;
  virtual void visitExpressaoLogica2(ExpressaoLogica2 *p) = 0;
  virtual void visitExpressaoLogicaExpressaoRelacional(ExpressaoLogicaExpressaoRelacional *p) = 0;
  virtual void visitExpressaoLogica3(ExpressaoLogica3 *p) = 0;
  virtual void visitExpressaoLogica4(ExpressaoLogica4 *p) = 0;
  virtual void visitExpressaoLogica5(ExpressaoLogica5 *p) = 0;
  virtual void visitRegraLogico1(RegraLogico1 *p) = 0;
  virtual void visitRegraLogico2(RegraLogico2 *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Entry : public Visitable
{
public:
  virtual Entry *clone() const = 0;

};

class BlocoDefinicoes : public Visitable
{
public:
  virtual BlocoDefinicoes *clone() const = 0;

};

class BlocoFuncaoEProc : public Visitable
{
public:
  virtual BlocoFuncaoEProc *clone() const = 0;

};

class BlocoConstante : public Visitable
{
public:
  virtual BlocoConstante *clone() const = 0;

};

class RegraBlocoConstante : public Visitable
{
public:
  virtual RegraBlocoConstante *clone() const = 0;

};

class BlocoTipo : public Visitable
{
public:
  virtual BlocoTipo *clone() const = 0;

};

class RegraBlocoTipo : public Visitable
{
public:
  virtual RegraBlocoTipo *clone() const = 0;

};

class BlocoVar : public Visitable
{
public:
  virtual BlocoVar *clone() const = 0;

};

class RegraBlocoVar : public Visitable
{
public:
  virtual RegraBlocoVar *clone() const = 0;

};

class BlocoComando : public Visitable
{
public:
  virtual BlocoComando *clone() const = 0;

};

class RegraComando : public Visitable
{
public:
  virtual RegraComando *clone() const = 0;

};

class Comando : public Visitable
{
public:
  virtual Comando *clone() const = 0;

};

class Atribuicao : public Visitable
{
public:
  virtual Atribuicao *clone() const = 0;

};

class SubEscrito : public Visitable
{
public:
  virtual SubEscrito *clone() const = 0;

};

class RegraTipo : public Visitable
{
public:
  virtual RegraTipo *clone() const = 0;

};

class TipoPrimitivo : public Visitable
{
public:
  virtual TipoPrimitivo *clone() const = 0;

};

class Valor : public Visitable
{
public:
  virtual Valor *clone() const = 0;

};

class TipoDerivado : public Visitable
{
public:
  virtual TipoDerivado *clone() const = 0;

};

class Ponteiro : public Visitable
{
public:
  virtual Ponteiro *clone() const = 0;

};

class Vetor : public Visitable
{
public:
  virtual Vetor *clone() const = 0;

};

class If : public Visitable
{
public:
  virtual If *clone() const = 0;

};

class While : public Visitable
{
public:
  virtual While *clone() const = 0;

};

class For : public Visitable
{
public:
  virtual For *clone() const = 0;

};

class Goto : public Visitable
{
public:
  virtual Goto *clone() const = 0;

};

class Rotulo : public Visitable
{
public:
  virtual Rotulo *clone() const = 0;

};

class Struct : public Visitable
{
public:
  virtual Struct *clone() const = 0;

};

class DefinicaoCampoStruct : public Visitable
{
public:
  virtual DefinicaoCampoStruct *clone() const = 0;

};

class AtribuicaoStruct : public Visitable
{
public:
  virtual AtribuicaoStruct *clone() const = 0;

};

class OperadorRelacional : public Visitable
{
public:
  virtual OperadorRelacional *clone() const = 0;

};

class OperadorLogico : public Visitable
{
public:
  virtual OperadorLogico *clone() const = 0;

};

class Negacao : public Visitable
{
public:
  virtual Negacao *clone() const = 0;

};

class OperadorAritmetico : public Visitable
{
public:
  virtual OperadorAritmetico *clone() const = 0;

};

class Case : public Visitable
{
public:
  virtual Case *clone() const = 0;

};

class RegraSeletor : public Visitable
{
public:
  virtual RegraSeletor *clone() const = 0;

};

class Seletor : public Visitable
{
public:
  virtual Seletor *clone() const = 0;

};

class ChamadaFuncaoEProc : public Visitable
{
public:
  virtual ChamadaFuncaoEProc *clone() const = 0;

};

class ListaIdent : public Visitable
{
public:
  virtual ListaIdent *clone() const = 0;

};

class Funcao : public Visitable
{
public:
  virtual Funcao *clone() const = 0;

};

class Procedimento : public Visitable
{
public:
  virtual Procedimento *clone() const = 0;

};

class ExpressaoAritmetica : public Visitable
{
public:
  virtual ExpressaoAritmetica *clone() const = 0;

};

class Operando : public Visitable
{
public:
  virtual Operando *clone() const = 0;

};

class RegraAritmetica : public Visitable
{
public:
  virtual RegraAritmetica *clone() const = 0;

};

class ExpressaoRelacional : public Visitable
{
public:
  virtual ExpressaoRelacional *clone() const = 0;

};

class RegraRelacional : public Visitable
{
public:
  virtual RegraRelacional *clone() const = 0;

};

class ExpressaoLogica : public Visitable
{
public:
  virtual ExpressaoLogica *clone() const = 0;

};

class RegraLogico : public Visitable
{
public:
  virtual RegraLogico *clone() const = 0;

};



class LEntry : public Entry
{
public:
  Ident ident_;
  BlocoDefinicoes *blocodefinicoes_;
  BlocoComando *blococomando_;

  LEntry(const LEntry &);
  LEntry &operator=(const LEntry &);
  LEntry(Ident p1, BlocoDefinicoes *p2, BlocoComando *p3);
  ~LEntry();
  virtual void accept(Visitor *v);
  virtual LEntry *clone() const;
  void swap(LEntry &);
};

class BlocoDefinicoes1 : public BlocoDefinicoes
{
public:
  BlocoFuncaoEProc *blocofuncaoeproc_;
  BlocoDefinicoes *blocodefinicoes_;

  BlocoDefinicoes1(const BlocoDefinicoes1 &);
  BlocoDefinicoes1 &operator=(const BlocoDefinicoes1 &);
  BlocoDefinicoes1(BlocoFuncaoEProc *p1, BlocoDefinicoes *p2);
  ~BlocoDefinicoes1();
  virtual void accept(Visitor *v);
  virtual BlocoDefinicoes1 *clone() const;
  void swap(BlocoDefinicoes1 &);
};

class BlocoDefinicoes2 : public BlocoDefinicoes
{
public:
  BlocoConstante *blococonstante_;
  BlocoDefinicoes *blocodefinicoes_;

  BlocoDefinicoes2(const BlocoDefinicoes2 &);
  BlocoDefinicoes2 &operator=(const BlocoDefinicoes2 &);
  BlocoDefinicoes2(BlocoConstante *p1, BlocoDefinicoes *p2);
  ~BlocoDefinicoes2();
  virtual void accept(Visitor *v);
  virtual BlocoDefinicoes2 *clone() const;
  void swap(BlocoDefinicoes2 &);
};

class BlocoDefinicoes3 : public BlocoDefinicoes
{
public:
  BlocoTipo *blocotipo_;
  BlocoDefinicoes *blocodefinicoes_;

  BlocoDefinicoes3(const BlocoDefinicoes3 &);
  BlocoDefinicoes3 &operator=(const BlocoDefinicoes3 &);
  BlocoDefinicoes3(BlocoTipo *p1, BlocoDefinicoes *p2);
  ~BlocoDefinicoes3();
  virtual void accept(Visitor *v);
  virtual BlocoDefinicoes3 *clone() const;
  void swap(BlocoDefinicoes3 &);
};

class BlocoDefinicoes4 : public BlocoDefinicoes
{
public:
  BlocoVar *blocovar_;
  BlocoDefinicoes *blocodefinicoes_;

  BlocoDefinicoes4(const BlocoDefinicoes4 &);
  BlocoDefinicoes4 &operator=(const BlocoDefinicoes4 &);
  BlocoDefinicoes4(BlocoVar *p1, BlocoDefinicoes *p2);
  ~BlocoDefinicoes4();
  virtual void accept(Visitor *v);
  virtual BlocoDefinicoes4 *clone() const;
  void swap(BlocoDefinicoes4 &);
};

class BlocoDefinicoes_ : public BlocoDefinicoes
{
public:

  BlocoDefinicoes_(const BlocoDefinicoes_ &);
  BlocoDefinicoes_ &operator=(const BlocoDefinicoes_ &);
  BlocoDefinicoes_();
  ~BlocoDefinicoes_();
  virtual void accept(Visitor *v);
  virtual BlocoDefinicoes_ *clone() const;
  void swap(BlocoDefinicoes_ &);
};

class BlocoFuncaoEProcFuncao : public BlocoFuncaoEProc
{
public:
  Funcao *funcao_;

  BlocoFuncaoEProcFuncao(const BlocoFuncaoEProcFuncao &);
  BlocoFuncaoEProcFuncao &operator=(const BlocoFuncaoEProcFuncao &);
  BlocoFuncaoEProcFuncao(Funcao *p1);
  ~BlocoFuncaoEProcFuncao();
  virtual void accept(Visitor *v);
  virtual BlocoFuncaoEProcFuncao *clone() const;
  void swap(BlocoFuncaoEProcFuncao &);
};

class BlocoFuncaoEProc1 : public BlocoFuncaoEProc
{
public:
  Funcao *funcao_;
  BlocoFuncaoEProc *blocofuncaoeproc_;

  BlocoFuncaoEProc1(const BlocoFuncaoEProc1 &);
  BlocoFuncaoEProc1 &operator=(const BlocoFuncaoEProc1 &);
  BlocoFuncaoEProc1(Funcao *p1, BlocoFuncaoEProc *p2);
  ~BlocoFuncaoEProc1();
  virtual void accept(Visitor *v);
  virtual BlocoFuncaoEProc1 *clone() const;
  void swap(BlocoFuncaoEProc1 &);
};

class BlocoFuncaoEProcProcedimento : public BlocoFuncaoEProc
{
public:
  Procedimento *procedimento_;

  BlocoFuncaoEProcProcedimento(const BlocoFuncaoEProcProcedimento &);
  BlocoFuncaoEProcProcedimento &operator=(const BlocoFuncaoEProcProcedimento &);
  BlocoFuncaoEProcProcedimento(Procedimento *p1);
  ~BlocoFuncaoEProcProcedimento();
  virtual void accept(Visitor *v);
  virtual BlocoFuncaoEProcProcedimento *clone() const;
  void swap(BlocoFuncaoEProcProcedimento &);
};

class BlocoFuncaoEProc2 : public BlocoFuncaoEProc
{
public:
  Procedimento *procedimento_;
  BlocoFuncaoEProc *blocofuncaoeproc_;

  BlocoFuncaoEProc2(const BlocoFuncaoEProc2 &);
  BlocoFuncaoEProc2 &operator=(const BlocoFuncaoEProc2 &);
  BlocoFuncaoEProc2(Procedimento *p1, BlocoFuncaoEProc *p2);
  ~BlocoFuncaoEProc2();
  virtual void accept(Visitor *v);
  virtual BlocoFuncaoEProc2 *clone() const;
  void swap(BlocoFuncaoEProc2 &);
};

class BlocoFuncaoEProc_ : public BlocoFuncaoEProc
{
public:

  BlocoFuncaoEProc_(const BlocoFuncaoEProc_ &);
  BlocoFuncaoEProc_ &operator=(const BlocoFuncaoEProc_ &);
  BlocoFuncaoEProc_();
  ~BlocoFuncaoEProc_();
  virtual void accept(Visitor *v);
  virtual BlocoFuncaoEProc_ *clone() const;
  void swap(BlocoFuncaoEProc_ &);
};

class BlocoConstante1 : public BlocoConstante
{
public:
  RegraBlocoConstante *regrablococonstante_;

  BlocoConstante1(const BlocoConstante1 &);
  BlocoConstante1 &operator=(const BlocoConstante1 &);
  BlocoConstante1(RegraBlocoConstante *p1);
  ~BlocoConstante1();
  virtual void accept(Visitor *v);
  virtual BlocoConstante1 *clone() const;
  void swap(BlocoConstante1 &);
};

class BlocoConstante_ : public BlocoConstante
{
public:

  BlocoConstante_(const BlocoConstante_ &);
  BlocoConstante_ &operator=(const BlocoConstante_ &);
  BlocoConstante_();
  ~BlocoConstante_();
  virtual void accept(Visitor *v);
  virtual BlocoConstante_ *clone() const;
  void swap(BlocoConstante_ &);
};

class RegraBlocoConstante1 : public RegraBlocoConstante
{
public:
  Ident ident_;
  Valor *valor_;

  RegraBlocoConstante1(const RegraBlocoConstante1 &);
  RegraBlocoConstante1 &operator=(const RegraBlocoConstante1 &);
  RegraBlocoConstante1(Ident p1, Valor *p2);
  ~RegraBlocoConstante1();
  virtual void accept(Visitor *v);
  virtual RegraBlocoConstante1 *clone() const;
  void swap(RegraBlocoConstante1 &);
};

class RegraBlocoConstante2 : public RegraBlocoConstante
{
public:
  Ident ident_;
  Valor *valor_;
  RegraBlocoConstante *regrablococonstante_;

  RegraBlocoConstante2(const RegraBlocoConstante2 &);
  RegraBlocoConstante2 &operator=(const RegraBlocoConstante2 &);
  RegraBlocoConstante2(Ident p1, Valor *p2, RegraBlocoConstante *p3);
  ~RegraBlocoConstante2();
  virtual void accept(Visitor *v);
  virtual RegraBlocoConstante2 *clone() const;
  void swap(RegraBlocoConstante2 &);
};

class BlocoTipo1 : public BlocoTipo
{
public:
  RegraBlocoTipo *regrablocotipo_;

  BlocoTipo1(const BlocoTipo1 &);
  BlocoTipo1 &operator=(const BlocoTipo1 &);
  BlocoTipo1(RegraBlocoTipo *p1);
  ~BlocoTipo1();
  virtual void accept(Visitor *v);
  virtual BlocoTipo1 *clone() const;
  void swap(BlocoTipo1 &);
};

class BlocoTipo_ : public BlocoTipo
{
public:

  BlocoTipo_(const BlocoTipo_ &);
  BlocoTipo_ &operator=(const BlocoTipo_ &);
  BlocoTipo_();
  ~BlocoTipo_();
  virtual void accept(Visitor *v);
  virtual BlocoTipo_ *clone() const;
  void swap(BlocoTipo_ &);
};

class RegraBlocoTipo1 : public RegraBlocoTipo
{
public:
  Ident ident_;
  RegraTipo *regratipo_;

  RegraBlocoTipo1(const RegraBlocoTipo1 &);
  RegraBlocoTipo1 &operator=(const RegraBlocoTipo1 &);
  RegraBlocoTipo1(Ident p1, RegraTipo *p2);
  ~RegraBlocoTipo1();
  virtual void accept(Visitor *v);
  virtual RegraBlocoTipo1 *clone() const;
  void swap(RegraBlocoTipo1 &);
};

class RegraBlocoTipo2 : public RegraBlocoTipo
{
public:
  Ident ident_;
  RegraTipo *regratipo_;
  RegraBlocoTipo *regrablocotipo_;

  RegraBlocoTipo2(const RegraBlocoTipo2 &);
  RegraBlocoTipo2 &operator=(const RegraBlocoTipo2 &);
  RegraBlocoTipo2(Ident p1, RegraTipo *p2, RegraBlocoTipo *p3);
  ~RegraBlocoTipo2();
  virtual void accept(Visitor *v);
  virtual RegraBlocoTipo2 *clone() const;
  void swap(RegraBlocoTipo2 &);
};

class BlocoVar1 : public BlocoVar
{
public:
  RegraBlocoVar *regrablocovar_;

  BlocoVar1(const BlocoVar1 &);
  BlocoVar1 &operator=(const BlocoVar1 &);
  BlocoVar1(RegraBlocoVar *p1);
  ~BlocoVar1();
  virtual void accept(Visitor *v);
  virtual BlocoVar1 *clone() const;
  void swap(BlocoVar1 &);
};

class BlocoVar_ : public BlocoVar
{
public:

  BlocoVar_(const BlocoVar_ &);
  BlocoVar_ &operator=(const BlocoVar_ &);
  BlocoVar_();
  ~BlocoVar_();
  virtual void accept(Visitor *v);
  virtual BlocoVar_ *clone() const;
  void swap(BlocoVar_ &);
};

class RegraBlocoVar1 : public RegraBlocoVar
{
public:
  Ident ident_;
  RegraTipo *regratipo_;

  RegraBlocoVar1(const RegraBlocoVar1 &);
  RegraBlocoVar1 &operator=(const RegraBlocoVar1 &);
  RegraBlocoVar1(Ident p1, RegraTipo *p2);
  ~RegraBlocoVar1();
  virtual void accept(Visitor *v);
  virtual RegraBlocoVar1 *clone() const;
  void swap(RegraBlocoVar1 &);
};

class RegraBlocoVar2 : public RegraBlocoVar
{
public:
  Ident ident_;
  RegraTipo *regratipo_;
  RegraBlocoVar *regrablocovar_;

  RegraBlocoVar2(const RegraBlocoVar2 &);
  RegraBlocoVar2 &operator=(const RegraBlocoVar2 &);
  RegraBlocoVar2(Ident p1, RegraTipo *p2, RegraBlocoVar *p3);
  ~RegraBlocoVar2();
  virtual void accept(Visitor *v);
  virtual RegraBlocoVar2 *clone() const;
  void swap(RegraBlocoVar2 &);
};

class RegraBlocoVar3 : public RegraBlocoVar
{
public:
  ListaIdent *listaident_;
  RegraTipo *regratipo_;

  RegraBlocoVar3(const RegraBlocoVar3 &);
  RegraBlocoVar3 &operator=(const RegraBlocoVar3 &);
  RegraBlocoVar3(ListaIdent *p1, RegraTipo *p2);
  ~RegraBlocoVar3();
  virtual void accept(Visitor *v);
  virtual RegraBlocoVar3 *clone() const;
  void swap(RegraBlocoVar3 &);
};

class RegraBlocoVar4 : public RegraBlocoVar
{
public:
  ListaIdent *listaident_;
  RegraTipo *regratipo_;
  RegraBlocoVar *regrablocovar_;

  RegraBlocoVar4(const RegraBlocoVar4 &);
  RegraBlocoVar4 &operator=(const RegraBlocoVar4 &);
  RegraBlocoVar4(ListaIdent *p1, RegraTipo *p2, RegraBlocoVar *p3);
  ~RegraBlocoVar4();
  virtual void accept(Visitor *v);
  virtual RegraBlocoVar4 *clone() const;
  void swap(RegraBlocoVar4 &);
};

class BlocoComando1 : public BlocoComando
{
public:
  RegraComando *regracomando_;

  BlocoComando1(const BlocoComando1 &);
  BlocoComando1 &operator=(const BlocoComando1 &);
  BlocoComando1(RegraComando *p1);
  ~BlocoComando1();
  virtual void accept(Visitor *v);
  virtual BlocoComando1 *clone() const;
  void swap(BlocoComando1 &);
};

class BlocoComando_ : public BlocoComando
{
public:

  BlocoComando_(const BlocoComando_ &);
  BlocoComando_ &operator=(const BlocoComando_ &);
  BlocoComando_();
  ~BlocoComando_();
  virtual void accept(Visitor *v);
  virtual BlocoComando_ *clone() const;
  void swap(BlocoComando_ &);
};

class RegraComando1 : public RegraComando
{
public:
  Comando *comando_;

  RegraComando1(const RegraComando1 &);
  RegraComando1 &operator=(const RegraComando1 &);
  RegraComando1(Comando *p1);
  ~RegraComando1();
  virtual void accept(Visitor *v);
  virtual RegraComando1 *clone() const;
  void swap(RegraComando1 &);
};

class RegraComando2 : public RegraComando
{
public:
  Comando *comando_;
  RegraComando *regracomando_;

  RegraComando2(const RegraComando2 &);
  RegraComando2 &operator=(const RegraComando2 &);
  RegraComando2(Comando *p1, RegraComando *p2);
  ~RegraComando2();
  virtual void accept(Visitor *v);
  virtual RegraComando2 *clone() const;
  void swap(RegraComando2 &);
};

class ComandoAtribuicao : public Comando
{
public:
  Atribuicao *atribuicao_;

  ComandoAtribuicao(const ComandoAtribuicao &);
  ComandoAtribuicao &operator=(const ComandoAtribuicao &);
  ComandoAtribuicao(Atribuicao *p1);
  ~ComandoAtribuicao();
  virtual void accept(Visitor *v);
  virtual ComandoAtribuicao *clone() const;
  void swap(ComandoAtribuicao &);
};

class ComandoIf : public Comando
{
public:
  If *if_;

  ComandoIf(const ComandoIf &);
  ComandoIf &operator=(const ComandoIf &);
  ComandoIf(If *p1);
  ~ComandoIf();
  virtual void accept(Visitor *v);
  virtual ComandoIf *clone() const;
  void swap(ComandoIf &);
};

class ComandoWhile : public Comando
{
public:
  While *while_;

  ComandoWhile(const ComandoWhile &);
  ComandoWhile &operator=(const ComandoWhile &);
  ComandoWhile(While *p1);
  ~ComandoWhile();
  virtual void accept(Visitor *v);
  virtual ComandoWhile *clone() const;
  void swap(ComandoWhile &);
};

class ComandoFor : public Comando
{
public:
  For *for_;

  ComandoFor(const ComandoFor &);
  ComandoFor &operator=(const ComandoFor &);
  ComandoFor(For *p1);
  ~ComandoFor();
  virtual void accept(Visitor *v);
  virtual ComandoFor *clone() const;
  void swap(ComandoFor &);
};

class ComandoGoto : public Comando
{
public:
  Goto *goto_;

  ComandoGoto(const ComandoGoto &);
  ComandoGoto &operator=(const ComandoGoto &);
  ComandoGoto(Goto *p1);
  ~ComandoGoto();
  virtual void accept(Visitor *v);
  virtual ComandoGoto *clone() const;
  void swap(ComandoGoto &);
};

class ComandoCase : public Comando
{
public:
  Case *case_;

  ComandoCase(const ComandoCase &);
  ComandoCase &operator=(const ComandoCase &);
  ComandoCase(Case *p1);
  ~ComandoCase();
  virtual void accept(Visitor *v);
  virtual ComandoCase *clone() const;
  void swap(ComandoCase &);
};

class ComandoChamadaFuncaoEProc : public Comando
{
public:
  ChamadaFuncaoEProc *chamadafuncaoeproc_;

  ComandoChamadaFuncaoEProc(const ComandoChamadaFuncaoEProc &);
  ComandoChamadaFuncaoEProc &operator=(const ComandoChamadaFuncaoEProc &);
  ComandoChamadaFuncaoEProc(ChamadaFuncaoEProc *p1);
  ~ComandoChamadaFuncaoEProc();
  virtual void accept(Visitor *v);
  virtual ComandoChamadaFuncaoEProc *clone() const;
  void swap(ComandoChamadaFuncaoEProc &);
};

class Atribuicao1 : public Atribuicao
{
public:
  Ident ident_;
  Valor *valor_;

  Atribuicao1(const Atribuicao1 &);
  Atribuicao1 &operator=(const Atribuicao1 &);
  Atribuicao1(Ident p1, Valor *p2);
  ~Atribuicao1();
  virtual void accept(Visitor *v);
  virtual Atribuicao1 *clone() const;
  void swap(Atribuicao1 &);
};

class Atribuicao2 : public Atribuicao
{
public:
  Ident ident_1;
  Ident ident_2;

  Atribuicao2(const Atribuicao2 &);
  Atribuicao2 &operator=(const Atribuicao2 &);
  Atribuicao2(Ident p1, Ident p2);
  ~Atribuicao2();
  virtual void accept(Visitor *v);
  virtual Atribuicao2 *clone() const;
  void swap(Atribuicao2 &);
};

class Atribuicao3 : public Atribuicao
{
public:
  Ident ident_;
  SubEscrito *subescrito_;
  Valor *valor_;

  Atribuicao3(const Atribuicao3 &);
  Atribuicao3 &operator=(const Atribuicao3 &);
  Atribuicao3(Ident p1, SubEscrito *p2, Valor *p3);
  ~Atribuicao3();
  virtual void accept(Visitor *v);
  virtual Atribuicao3 *clone() const;
  void swap(Atribuicao3 &);
};

class Atribuicao4 : public Atribuicao
{
public:
  Ident ident_;
  Valor *valor_;

  Atribuicao4(const Atribuicao4 &);
  Atribuicao4 &operator=(const Atribuicao4 &);
  Atribuicao4(Ident p1, Valor *p2);
  ~Atribuicao4();
  virtual void accept(Visitor *v);
  virtual Atribuicao4 *clone() const;
  void swap(Atribuicao4 &);
};

class AtribuicaoAtribuicaoStruct : public Atribuicao
{
public:
  AtribuicaoStruct *atribuicaostruct_;

  AtribuicaoAtribuicaoStruct(const AtribuicaoAtribuicaoStruct &);
  AtribuicaoAtribuicaoStruct &operator=(const AtribuicaoAtribuicaoStruct &);
  AtribuicaoAtribuicaoStruct(AtribuicaoStruct *p1);
  ~AtribuicaoAtribuicaoStruct();
  virtual void accept(Visitor *v);
  virtual AtribuicaoAtribuicaoStruct *clone() const;
  void swap(AtribuicaoAtribuicaoStruct &);
};

class Atribuicao5 : public Atribuicao
{
public:
  Ident ident_;
  ChamadaFuncaoEProc *chamadafuncaoeproc_;

  Atribuicao5(const Atribuicao5 &);
  Atribuicao5 &operator=(const Atribuicao5 &);
  Atribuicao5(Ident p1, ChamadaFuncaoEProc *p2);
  ~Atribuicao5();
  virtual void accept(Visitor *v);
  virtual Atribuicao5 *clone() const;
  void swap(Atribuicao5 &);
};

class SubEscritoIdent : public SubEscrito
{
public:
  Ident ident_;

  SubEscritoIdent(const SubEscritoIdent &);
  SubEscritoIdent &operator=(const SubEscritoIdent &);
  SubEscritoIdent(Ident p1);
  ~SubEscritoIdent();
  virtual void accept(Visitor *v);
  virtual SubEscritoIdent *clone() const;
  void swap(SubEscritoIdent &);
};

class SubEscritoInteger : public SubEscrito
{
public:
  Integer integer_;

  SubEscritoInteger(const SubEscritoInteger &);
  SubEscritoInteger &operator=(const SubEscritoInteger &);
  SubEscritoInteger(Integer p1);
  ~SubEscritoInteger();
  virtual void accept(Visitor *v);
  virtual SubEscritoInteger *clone() const;
  void swap(SubEscritoInteger &);
};

class RegraTipoTipoPrimitivo : public RegraTipo
{
public:
  TipoPrimitivo *tipoprimitivo_;

  RegraTipoTipoPrimitivo(const RegraTipoTipoPrimitivo &);
  RegraTipoTipoPrimitivo &operator=(const RegraTipoTipoPrimitivo &);
  RegraTipoTipoPrimitivo(TipoPrimitivo *p1);
  ~RegraTipoTipoPrimitivo();
  virtual void accept(Visitor *v);
  virtual RegraTipoTipoPrimitivo *clone() const;
  void swap(RegraTipoTipoPrimitivo &);
};

class RegraTipoTipoDerivado : public RegraTipo
{
public:
  TipoDerivado *tipoderivado_;

  RegraTipoTipoDerivado(const RegraTipoTipoDerivado &);
  RegraTipoTipoDerivado &operator=(const RegraTipoTipoDerivado &);
  RegraTipoTipoDerivado(TipoDerivado *p1);
  ~RegraTipoTipoDerivado();
  virtual void accept(Visitor *v);
  virtual RegraTipoTipoDerivado *clone() const;
  void swap(RegraTipoTipoDerivado &);
};

class RegraTipoIdent : public RegraTipo
{
public:
  Ident ident_;

  RegraTipoIdent(const RegraTipoIdent &);
  RegraTipoIdent &operator=(const RegraTipoIdent &);
  RegraTipoIdent(Ident p1);
  ~RegraTipoIdent();
  virtual void accept(Visitor *v);
  virtual RegraTipoIdent *clone() const;
  void swap(RegraTipoIdent &);
};

class TipoPrimitivo_int : public TipoPrimitivo
{
public:

  TipoPrimitivo_int(const TipoPrimitivo_int &);
  TipoPrimitivo_int &operator=(const TipoPrimitivo_int &);
  TipoPrimitivo_int();
  ~TipoPrimitivo_int();
  virtual void accept(Visitor *v);
  virtual TipoPrimitivo_int *clone() const;
  void swap(TipoPrimitivo_int &);
};

class TipoPrimitivo_real : public TipoPrimitivo
{
public:

  TipoPrimitivo_real(const TipoPrimitivo_real &);
  TipoPrimitivo_real &operator=(const TipoPrimitivo_real &);
  TipoPrimitivo_real();
  ~TipoPrimitivo_real();
  virtual void accept(Visitor *v);
  virtual TipoPrimitivo_real *clone() const;
  void swap(TipoPrimitivo_real &);
};

class TipoPrimitivo_char : public TipoPrimitivo
{
public:

  TipoPrimitivo_char(const TipoPrimitivo_char &);
  TipoPrimitivo_char &operator=(const TipoPrimitivo_char &);
  TipoPrimitivo_char();
  ~TipoPrimitivo_char();
  virtual void accept(Visitor *v);
  virtual TipoPrimitivo_char *clone() const;
  void swap(TipoPrimitivo_char &);
};

class ValorInteger : public Valor
{
public:
  Integer integer_;

  ValorInteger(const ValorInteger &);
  ValorInteger &operator=(const ValorInteger &);
  ValorInteger(Integer p1);
  ~ValorInteger();
  virtual void accept(Visitor *v);
  virtual ValorInteger *clone() const;
  void swap(ValorInteger &);
};

class ValorDouble : public Valor
{
public:
  Double double_;

  ValorDouble(const ValorDouble &);
  ValorDouble &operator=(const ValorDouble &);
  ValorDouble(Double p1);
  ~ValorDouble();
  virtual void accept(Visitor *v);
  virtual ValorDouble *clone() const;
  void swap(ValorDouble &);
};

class ValorChar : public Valor
{
public:
  Char char_;

  ValorChar(const ValorChar &);
  ValorChar &operator=(const ValorChar &);
  ValorChar(Char p1);
  ~ValorChar();
  virtual void accept(Visitor *v);
  virtual ValorChar *clone() const;
  void swap(ValorChar &);
};

class ValorString : public Valor
{
public:
  String string_;

  ValorString(const ValorString &);
  ValorString &operator=(const ValorString &);
  ValorString(String p1);
  ~ValorString();
  virtual void accept(Visitor *v);
  virtual ValorString *clone() const;
  void swap(ValorString &);
};

class ValorExpressaoAritmetica : public Valor
{
public:
  ExpressaoAritmetica *expressaoaritmetica_;

  ValorExpressaoAritmetica(const ValorExpressaoAritmetica &);
  ValorExpressaoAritmetica &operator=(const ValorExpressaoAritmetica &);
  ValorExpressaoAritmetica(ExpressaoAritmetica *p1);
  ~ValorExpressaoAritmetica();
  virtual void accept(Visitor *v);
  virtual ValorExpressaoAritmetica *clone() const;
  void swap(ValorExpressaoAritmetica &);
};

class TipoDerivadoPonteiro : public TipoDerivado
{
public:
  Ponteiro *ponteiro_;

  TipoDerivadoPonteiro(const TipoDerivadoPonteiro &);
  TipoDerivadoPonteiro &operator=(const TipoDerivadoPonteiro &);
  TipoDerivadoPonteiro(Ponteiro *p1);
  ~TipoDerivadoPonteiro();
  virtual void accept(Visitor *v);
  virtual TipoDerivadoPonteiro *clone() const;
  void swap(TipoDerivadoPonteiro &);
};

class TipoDerivadoVetor : public TipoDerivado
{
public:
  Vetor *vetor_;

  TipoDerivadoVetor(const TipoDerivadoVetor &);
  TipoDerivadoVetor &operator=(const TipoDerivadoVetor &);
  TipoDerivadoVetor(Vetor *p1);
  ~TipoDerivadoVetor();
  virtual void accept(Visitor *v);
  virtual TipoDerivadoVetor *clone() const;
  void swap(TipoDerivadoVetor &);
};

class TipoDerivadoStruct : public TipoDerivado
{
public:
  Struct *struct_;

  TipoDerivadoStruct(const TipoDerivadoStruct &);
  TipoDerivadoStruct &operator=(const TipoDerivadoStruct &);
  TipoDerivadoStruct(Struct *p1);
  ~TipoDerivadoStruct();
  virtual void accept(Visitor *v);
  virtual TipoDerivadoStruct *clone() const;
  void swap(TipoDerivadoStruct &);
};

class Ponteiro1 : public Ponteiro
{
public:
  TipoPrimitivo *tipoprimitivo_;

  Ponteiro1(const Ponteiro1 &);
  Ponteiro1 &operator=(const Ponteiro1 &);
  Ponteiro1(TipoPrimitivo *p1);
  ~Ponteiro1();
  virtual void accept(Visitor *v);
  virtual Ponteiro1 *clone() const;
  void swap(Ponteiro1 &);
};

class Ponteiro2 : public Ponteiro
{
public:
  TipoDerivado *tipoderivado_;

  Ponteiro2(const Ponteiro2 &);
  Ponteiro2 &operator=(const Ponteiro2 &);
  Ponteiro2(TipoDerivado *p1);
  ~Ponteiro2();
  virtual void accept(Visitor *v);
  virtual Ponteiro2 *clone() const;
  void swap(Ponteiro2 &);
};

class LVetor : public Vetor
{
public:
  Integer integer_1;
  Integer integer_2;
  TipoPrimitivo *tipoprimitivo_;

  LVetor(const LVetor &);
  LVetor &operator=(const LVetor &);
  LVetor(Integer p1, Integer p2, TipoPrimitivo *p3);
  ~LVetor();
  virtual void accept(Visitor *v);
  virtual LVetor *clone() const;
  void swap(LVetor &);
};

class If1 : public If
{
public:
  ExpressaoLogica *expressaologica_;
  BlocoComando *blococomando_;

  If1(const If1 &);
  If1 &operator=(const If1 &);
  If1(ExpressaoLogica *p1, BlocoComando *p2);
  ~If1();
  virtual void accept(Visitor *v);
  virtual If1 *clone() const;
  void swap(If1 &);
};

class If2 : public If
{
public:
  ExpressaoLogica *expressaologica_;
  BlocoComando *blococomando_1;
  BlocoComando *blococomando_2;

  If2(const If2 &);
  If2 &operator=(const If2 &);
  If2(ExpressaoLogica *p1, BlocoComando *p2, BlocoComando *p3);
  ~If2();
  virtual void accept(Visitor *v);
  virtual If2 *clone() const;
  void swap(If2 &);
};

class LWhile : public While
{
public:
  ExpressaoLogica *expressaologica_;
  BlocoComando *blococomando_;

  LWhile(const LWhile &);
  LWhile &operator=(const LWhile &);
  LWhile(ExpressaoLogica *p1, BlocoComando *p2);
  ~LWhile();
  virtual void accept(Visitor *v);
  virtual LWhile *clone() const;
  void swap(LWhile &);
};

class For1 : public For
{
public:
  Atribuicao *atribuicao_;
  Integer integer_;
  BlocoComando *blococomando_;

  For1(const For1 &);
  For1 &operator=(const For1 &);
  For1(Atribuicao *p1, Integer p2, BlocoComando *p3);
  ~For1();
  virtual void accept(Visitor *v);
  virtual For1 *clone() const;
  void swap(For1 &);
};

class For2 : public For
{
public:
  Atribuicao *atribuicao_;
  Ident ident_;
  BlocoComando *blococomando_;

  For2(const For2 &);
  For2 &operator=(const For2 &);
  For2(Atribuicao *p1, Ident p2, BlocoComando *p3);
  ~For2();
  virtual void accept(Visitor *v);
  virtual For2 *clone() const;
  void swap(For2 &);
};

class LGoto : public Goto
{
public:
  Ident ident_;

  LGoto(const LGoto &);
  LGoto &operator=(const LGoto &);
  LGoto(Ident p1);
  ~LGoto();
  virtual void accept(Visitor *v);
  virtual LGoto *clone() const;
  void swap(LGoto &);
};

class LRotulo : public Rotulo
{
public:
  Ident ident_;
  RegraComando *regracomando_;

  LRotulo(const LRotulo &);
  LRotulo &operator=(const LRotulo &);
  LRotulo(Ident p1, RegraComando *p2);
  ~LRotulo();
  virtual void accept(Visitor *v);
  virtual LRotulo *clone() const;
  void swap(LRotulo &);
};

class LStruct : public Struct
{
public:
  DefinicaoCampoStruct *definicaocampostruct_;

  LStruct(const LStruct &);
  LStruct &operator=(const LStruct &);
  LStruct(DefinicaoCampoStruct *p1);
  ~LStruct();
  virtual void accept(Visitor *v);
  virtual LStruct *clone() const;
  void swap(LStruct &);
};

class DefinicaoCampoStruct1 : public DefinicaoCampoStruct
{
public:
  Ident ident_;
  RegraTipo *regratipo_;

  DefinicaoCampoStruct1(const DefinicaoCampoStruct1 &);
  DefinicaoCampoStruct1 &operator=(const DefinicaoCampoStruct1 &);
  DefinicaoCampoStruct1(Ident p1, RegraTipo *p2);
  ~DefinicaoCampoStruct1();
  virtual void accept(Visitor *v);
  virtual DefinicaoCampoStruct1 *clone() const;
  void swap(DefinicaoCampoStruct1 &);
};

class DefinicaoCampoStruct2 : public DefinicaoCampoStruct
{
public:
  Ident ident_;
  RegraTipo *regratipo_;
  DefinicaoCampoStruct *definicaocampostruct_;

  DefinicaoCampoStruct2(const DefinicaoCampoStruct2 &);
  DefinicaoCampoStruct2 &operator=(const DefinicaoCampoStruct2 &);
  DefinicaoCampoStruct2(Ident p1, RegraTipo *p2, DefinicaoCampoStruct *p3);
  ~DefinicaoCampoStruct2();
  virtual void accept(Visitor *v);
  virtual DefinicaoCampoStruct2 *clone() const;
  void swap(DefinicaoCampoStruct2 &);
};

class AtribuicaoStruct1 : public AtribuicaoStruct
{
public:
  Ident ident_1;
  Ident ident_2;
  Valor *valor_;

  AtribuicaoStruct1(const AtribuicaoStruct1 &);
  AtribuicaoStruct1 &operator=(const AtribuicaoStruct1 &);
  AtribuicaoStruct1(Ident p1, Ident p2, Valor *p3);
  ~AtribuicaoStruct1();
  virtual void accept(Visitor *v);
  virtual AtribuicaoStruct1 *clone() const;
  void swap(AtribuicaoStruct1 &);
};

class AtribuicaoStruct2 : public AtribuicaoStruct
{
public:
  Ident ident_1;
  Ident ident_2;
  Valor *valor_;
  AtribuicaoStruct *atribuicaostruct_;

  AtribuicaoStruct2(const AtribuicaoStruct2 &);
  AtribuicaoStruct2 &operator=(const AtribuicaoStruct2 &);
  AtribuicaoStruct2(Ident p1, Ident p2, Valor *p3, AtribuicaoStruct *p4);
  ~AtribuicaoStruct2();
  virtual void accept(Visitor *v);
  virtual AtribuicaoStruct2 *clone() const;
  void swap(AtribuicaoStruct2 &);
};

class OperadorRelacional1 : public OperadorRelacional
{
public:

  OperadorRelacional1(const OperadorRelacional1 &);
  OperadorRelacional1 &operator=(const OperadorRelacional1 &);
  OperadorRelacional1();
  ~OperadorRelacional1();
  virtual void accept(Visitor *v);
  virtual OperadorRelacional1 *clone() const;
  void swap(OperadorRelacional1 &);
};

class OperadorRelacional2 : public OperadorRelacional
{
public:

  OperadorRelacional2(const OperadorRelacional2 &);
  OperadorRelacional2 &operator=(const OperadorRelacional2 &);
  OperadorRelacional2();
  ~OperadorRelacional2();
  virtual void accept(Visitor *v);
  virtual OperadorRelacional2 *clone() const;
  void swap(OperadorRelacional2 &);
};

class OperadorRelacional3 : public OperadorRelacional
{
public:

  OperadorRelacional3(const OperadorRelacional3 &);
  OperadorRelacional3 &operator=(const OperadorRelacional3 &);
  OperadorRelacional3();
  ~OperadorRelacional3();
  virtual void accept(Visitor *v);
  virtual OperadorRelacional3 *clone() const;
  void swap(OperadorRelacional3 &);
};

class OperadorRelacional4 : public OperadorRelacional
{
public:

  OperadorRelacional4(const OperadorRelacional4 &);
  OperadorRelacional4 &operator=(const OperadorRelacional4 &);
  OperadorRelacional4();
  ~OperadorRelacional4();
  virtual void accept(Visitor *v);
  virtual OperadorRelacional4 *clone() const;
  void swap(OperadorRelacional4 &);
};

class OperadorRelacional5 : public OperadorRelacional
{
public:

  OperadorRelacional5(const OperadorRelacional5 &);
  OperadorRelacional5 &operator=(const OperadorRelacional5 &);
  OperadorRelacional5();
  ~OperadorRelacional5();
  virtual void accept(Visitor *v);
  virtual OperadorRelacional5 *clone() const;
  void swap(OperadorRelacional5 &);
};

class OperadorRelacional6 : public OperadorRelacional
{
public:

  OperadorRelacional6(const OperadorRelacional6 &);
  OperadorRelacional6 &operator=(const OperadorRelacional6 &);
  OperadorRelacional6();
  ~OperadorRelacional6();
  virtual void accept(Visitor *v);
  virtual OperadorRelacional6 *clone() const;
  void swap(OperadorRelacional6 &);
};

class OperadorLogico1 : public OperadorLogico
{
public:

  OperadorLogico1(const OperadorLogico1 &);
  OperadorLogico1 &operator=(const OperadorLogico1 &);
  OperadorLogico1();
  ~OperadorLogico1();
  virtual void accept(Visitor *v);
  virtual OperadorLogico1 *clone() const;
  void swap(OperadorLogico1 &);
};

class OperadorLogico2 : public OperadorLogico
{
public:

  OperadorLogico2(const OperadorLogico2 &);
  OperadorLogico2 &operator=(const OperadorLogico2 &);
  OperadorLogico2();
  ~OperadorLogico2();
  virtual void accept(Visitor *v);
  virtual OperadorLogico2 *clone() const;
  void swap(OperadorLogico2 &);
};

class OperadorLogico3 : public OperadorLogico
{
public:

  OperadorLogico3(const OperadorLogico3 &);
  OperadorLogico3 &operator=(const OperadorLogico3 &);
  OperadorLogico3();
  ~OperadorLogico3();
  virtual void accept(Visitor *v);
  virtual OperadorLogico3 *clone() const;
  void swap(OperadorLogico3 &);
};

class OperadorLogicoNegacao : public OperadorLogico
{
public:
  Negacao *negacao_;

  OperadorLogicoNegacao(const OperadorLogicoNegacao &);
  OperadorLogicoNegacao &operator=(const OperadorLogicoNegacao &);
  OperadorLogicoNegacao(Negacao *p1);
  ~OperadorLogicoNegacao();
  virtual void accept(Visitor *v);
  virtual OperadorLogicoNegacao *clone() const;
  void swap(OperadorLogicoNegacao &);
};

class LNegacao : public Negacao
{
public:

  LNegacao(const LNegacao &);
  LNegacao &operator=(const LNegacao &);
  LNegacao();
  ~LNegacao();
  virtual void accept(Visitor *v);
  virtual LNegacao *clone() const;
  void swap(LNegacao &);
};

class OperadorAritmetico1 : public OperadorAritmetico
{
public:

  OperadorAritmetico1(const OperadorAritmetico1 &);
  OperadorAritmetico1 &operator=(const OperadorAritmetico1 &);
  OperadorAritmetico1();
  ~OperadorAritmetico1();
  virtual void accept(Visitor *v);
  virtual OperadorAritmetico1 *clone() const;
  void swap(OperadorAritmetico1 &);
};

class OperadorAritmetico2 : public OperadorAritmetico
{
public:

  OperadorAritmetico2(const OperadorAritmetico2 &);
  OperadorAritmetico2 &operator=(const OperadorAritmetico2 &);
  OperadorAritmetico2();
  ~OperadorAritmetico2();
  virtual void accept(Visitor *v);
  virtual OperadorAritmetico2 *clone() const;
  void swap(OperadorAritmetico2 &);
};

class OperadorAritmetico3 : public OperadorAritmetico
{
public:

  OperadorAritmetico3(const OperadorAritmetico3 &);
  OperadorAritmetico3 &operator=(const OperadorAritmetico3 &);
  OperadorAritmetico3();
  ~OperadorAritmetico3();
  virtual void accept(Visitor *v);
  virtual OperadorAritmetico3 *clone() const;
  void swap(OperadorAritmetico3 &);
};

class OperadorAritmetico4 : public OperadorAritmetico
{
public:

  OperadorAritmetico4(const OperadorAritmetico4 &);
  OperadorAritmetico4 &operator=(const OperadorAritmetico4 &);
  OperadorAritmetico4();
  ~OperadorAritmetico4();
  virtual void accept(Visitor *v);
  virtual OperadorAritmetico4 *clone() const;
  void swap(OperadorAritmetico4 &);
};

class LCase : public Case
{
public:
  Seletor *seletor_;
  RegraSeletor *regraseletor_;

  LCase(const LCase &);
  LCase &operator=(const LCase &);
  LCase(Seletor *p1, RegraSeletor *p2);
  ~LCase();
  virtual void accept(Visitor *v);
  virtual LCase *clone() const;
  void swap(LCase &);
};

class RegraSeletor1 : public RegraSeletor
{
public:
  Seletor *seletor_;
  Comando *comando_;

  RegraSeletor1(const RegraSeletor1 &);
  RegraSeletor1 &operator=(const RegraSeletor1 &);
  RegraSeletor1(Seletor *p1, Comando *p2);
  ~RegraSeletor1();
  virtual void accept(Visitor *v);
  virtual RegraSeletor1 *clone() const;
  void swap(RegraSeletor1 &);
};

class RegraSeletor2 : public RegraSeletor
{
public:
  Seletor *seletor_;
  Comando *comando_;
  RegraSeletor *regraseletor_;

  RegraSeletor2(const RegraSeletor2 &);
  RegraSeletor2 &operator=(const RegraSeletor2 &);
  RegraSeletor2(Seletor *p1, Comando *p2, RegraSeletor *p3);
  ~RegraSeletor2();
  virtual void accept(Visitor *v);
  virtual RegraSeletor2 *clone() const;
  void swap(RegraSeletor2 &);
};

class SeletorInteger : public Seletor
{
public:
  Integer integer_;

  SeletorInteger(const SeletorInteger &);
  SeletorInteger &operator=(const SeletorInteger &);
  SeletorInteger(Integer p1);
  ~SeletorInteger();
  virtual void accept(Visitor *v);
  virtual SeletorInteger *clone() const;
  void swap(SeletorInteger &);
};

class SeletorChar : public Seletor
{
public:
  Char char_;

  SeletorChar(const SeletorChar &);
  SeletorChar &operator=(const SeletorChar &);
  SeletorChar(Char p1);
  ~SeletorChar();
  virtual void accept(Visitor *v);
  virtual SeletorChar *clone() const;
  void swap(SeletorChar &);
};

class SeletorIdent : public Seletor
{
public:
  Ident ident_;

  SeletorIdent(const SeletorIdent &);
  SeletorIdent &operator=(const SeletorIdent &);
  SeletorIdent(Ident p1);
  ~SeletorIdent();
  virtual void accept(Visitor *v);
  virtual SeletorIdent *clone() const;
  void swap(SeletorIdent &);
};

class LChamad : public ChamadaFuncaoEProc
{
public:
  Ident ident_;
  ListaIdent *listaident_;

  LChamad(const LChamad &);
  LChamad &operator=(const LChamad &);
  LChamad(Ident p1, ListaIdent *p2);
  ~LChamad();
  virtual void accept(Visitor *v);
  virtual LChamad *clone() const;
  void swap(LChamad &);
};

class ListaIdentIdent : public ListaIdent
{
public:
  Ident ident_;

  ListaIdentIdent(const ListaIdentIdent &);
  ListaIdentIdent &operator=(const ListaIdentIdent &);
  ListaIdentIdent(Ident p1);
  ~ListaIdentIdent();
  virtual void accept(Visitor *v);
  virtual ListaIdentIdent *clone() const;
  void swap(ListaIdentIdent &);
};

class ListaIdent1 : public ListaIdent
{
public:
  Ident ident_;
  ListaIdent *listaident_;

  ListaIdent1(const ListaIdent1 &);
  ListaIdent1 &operator=(const ListaIdent1 &);
  ListaIdent1(Ident p1, ListaIdent *p2);
  ~ListaIdent1();
  virtual void accept(Visitor *v);
  virtual ListaIdent1 *clone() const;
  void swap(ListaIdent1 &);
};

class LFuncao : public Funcao
{
public:
  Ident ident_;
  RegraBlocoVar *regrablocovar_;
  RegraTipo *regratipo_;
  BlocoVar *blocovar_;
  BlocoComando *blococomando_;

  LFuncao(const LFuncao &);
  LFuncao &operator=(const LFuncao &);
  LFuncao(Ident p1, RegraBlocoVar *p2, RegraTipo *p3, BlocoVar *p4, BlocoComando *p5);
  ~LFuncao();
  virtual void accept(Visitor *v);
  virtual LFuncao *clone() const;
  void swap(LFuncao &);
};

class Procedimento1 : public Procedimento
{
public:
  Ident ident_;
  RegraBlocoVar *regrablocovar_;
  BlocoVar *blocovar_;
  BlocoComando *blococomando_;

  Procedimento1(const Procedimento1 &);
  Procedimento1 &operator=(const Procedimento1 &);
  Procedimento1(Ident p1, RegraBlocoVar *p2, BlocoVar *p3, BlocoComando *p4);
  ~Procedimento1();
  virtual void accept(Visitor *v);
  virtual Procedimento1 *clone() const;
  void swap(Procedimento1 &);
};

class Procedimento2 : public Procedimento
{
public:
  Ident ident_;
  BlocoVar *blocovar_;
  BlocoComando *blococomando_;

  Procedimento2(const Procedimento2 &);
  Procedimento2 &operator=(const Procedimento2 &);
  Procedimento2(Ident p1, BlocoVar *p2, BlocoComando *p3);
  ~Procedimento2();
  virtual void accept(Visitor *v);
  virtual Procedimento2 *clone() const;
  void swap(Procedimento2 &);
};

class ExpAr : public ExpressaoAritmetica
{
public:
  Operando *operando_;
  RegraAritmetica *regraaritmetica_;

  ExpAr(const ExpAr &);
  ExpAr &operator=(const ExpAr &);
  ExpAr(Operando *p1, RegraAritmetica *p2);
  ~ExpAr();
  virtual void accept(Visitor *v);
  virtual ExpAr *clone() const;
  void swap(ExpAr &);
};

class OperandoInteger : public Operando
{
public:
  Integer integer_;

  OperandoInteger(const OperandoInteger &);
  OperandoInteger &operator=(const OperandoInteger &);
  OperandoInteger(Integer p1);
  ~OperandoInteger();
  virtual void accept(Visitor *v);
  virtual OperandoInteger *clone() const;
  void swap(OperandoInteger &);
};

class OperandoDouble : public Operando
{
public:
  Double double_;

  OperandoDouble(const OperandoDouble &);
  OperandoDouble &operator=(const OperandoDouble &);
  OperandoDouble(Double p1);
  ~OperandoDouble();
  virtual void accept(Visitor *v);
  virtual OperandoDouble *clone() const;
  void swap(OperandoDouble &);
};

class OperandoIdent : public Operando
{
public:
  Ident ident_;

  OperandoIdent(const OperandoIdent &);
  OperandoIdent &operator=(const OperandoIdent &);
  OperandoIdent(Ident p1);
  ~OperandoIdent();
  virtual void accept(Visitor *v);
  virtual OperandoIdent *clone() const;
  void swap(OperandoIdent &);
};

class RegraAritmetica1 : public RegraAritmetica
{
public:
  OperadorAritmetico *operadoraritmetico_;
  Operando *operando_;

  RegraAritmetica1(const RegraAritmetica1 &);
  RegraAritmetica1 &operator=(const RegraAritmetica1 &);
  RegraAritmetica1(OperadorAritmetico *p1, Operando *p2);
  ~RegraAritmetica1();
  virtual void accept(Visitor *v);
  virtual RegraAritmetica1 *clone() const;
  void swap(RegraAritmetica1 &);
};

class RegraAritmetica2 : public RegraAritmetica
{
public:
  OperadorAritmetico *operadoraritmetico_;
  Operando *operando_;
  RegraAritmetica *regraaritmetica_;

  RegraAritmetica2(const RegraAritmetica2 &);
  RegraAritmetica2 &operator=(const RegraAritmetica2 &);
  RegraAritmetica2(OperadorAritmetico *p1, Operando *p2, RegraAritmetica *p3);
  ~RegraAritmetica2();
  virtual void accept(Visitor *v);
  virtual RegraAritmetica2 *clone() const;
  void swap(RegraAritmetica2 &);
};

class ExpressaoRelacionalOperando : public ExpressaoRelacional
{
public:
  Operando *operando_;

  ExpressaoRelacionalOperando(const ExpressaoRelacionalOperando &);
  ExpressaoRelacionalOperando &operator=(const ExpressaoRelacionalOperando &);
  ExpressaoRelacionalOperando(Operando *p1);
  ~ExpressaoRelacionalOperando();
  virtual void accept(Visitor *v);
  virtual ExpressaoRelacionalOperando *clone() const;
  void swap(ExpressaoRelacionalOperando &);
};

class ExpressaoRelacional1 : public ExpressaoRelacional
{
public:
  Operando *operando_;
  RegraRelacional *regrarelacional_;

  ExpressaoRelacional1(const ExpressaoRelacional1 &);
  ExpressaoRelacional1 &operator=(const ExpressaoRelacional1 &);
  ExpressaoRelacional1(Operando *p1, RegraRelacional *p2);
  ~ExpressaoRelacional1();
  virtual void accept(Visitor *v);
  virtual ExpressaoRelacional1 *clone() const;
  void swap(ExpressaoRelacional1 &);
};

class ExpressaoRelacional2 : public ExpressaoRelacional
{
public:
  ExpressaoAritmetica *expressaoaritmetica_;
  RegraRelacional *regrarelacional_;

  ExpressaoRelacional2(const ExpressaoRelacional2 &);
  ExpressaoRelacional2 &operator=(const ExpressaoRelacional2 &);
  ExpressaoRelacional2(ExpressaoAritmetica *p1, RegraRelacional *p2);
  ~ExpressaoRelacional2();
  virtual void accept(Visitor *v);
  virtual ExpressaoRelacional2 *clone() const;
  void swap(ExpressaoRelacional2 &);
};

class RegraRelacional1 : public RegraRelacional
{
public:
  OperadorRelacional *operadorrelacional_;
  Operando *operando_;

  RegraRelacional1(const RegraRelacional1 &);
  RegraRelacional1 &operator=(const RegraRelacional1 &);
  RegraRelacional1(OperadorRelacional *p1, Operando *p2);
  ~RegraRelacional1();
  virtual void accept(Visitor *v);
  virtual RegraRelacional1 *clone() const;
  void swap(RegraRelacional1 &);
};

class RegraRelacional2 : public RegraRelacional
{
public:
  OperadorRelacional *operadorrelacional_;
  ExpressaoAritmetica *expressaoaritmetica_;

  RegraRelacional2(const RegraRelacional2 &);
  RegraRelacional2 &operator=(const RegraRelacional2 &);
  RegraRelacional2(OperadorRelacional *p1, ExpressaoAritmetica *p2);
  ~RegraRelacional2();
  virtual void accept(Visitor *v);
  virtual RegraRelacional2 *clone() const;
  void swap(RegraRelacional2 &);
};

class ExpressaoLogica_falso : public ExpressaoLogica
{
public:

  ExpressaoLogica_falso(const ExpressaoLogica_falso &);
  ExpressaoLogica_falso &operator=(const ExpressaoLogica_falso &);
  ExpressaoLogica_falso();
  ~ExpressaoLogica_falso();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogica_falso *clone() const;
  void swap(ExpressaoLogica_falso &);
};

class ExpressaoLogica1 : public ExpressaoLogica
{
public:
  RegraLogico *regralogico_;

  ExpressaoLogica1(const ExpressaoLogica1 &);
  ExpressaoLogica1 &operator=(const ExpressaoLogica1 &);
  ExpressaoLogica1(RegraLogico *p1);
  ~ExpressaoLogica1();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogica1 *clone() const;
  void swap(ExpressaoLogica1 &);
};

class ExpressaoLogica_verdadeiro : public ExpressaoLogica
{
public:

  ExpressaoLogica_verdadeiro(const ExpressaoLogica_verdadeiro &);
  ExpressaoLogica_verdadeiro &operator=(const ExpressaoLogica_verdadeiro &);
  ExpressaoLogica_verdadeiro();
  ~ExpressaoLogica_verdadeiro();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogica_verdadeiro *clone() const;
  void swap(ExpressaoLogica_verdadeiro &);
};

class ExpressaoLogica2 : public ExpressaoLogica
{
public:
  RegraLogico *regralogico_;

  ExpressaoLogica2(const ExpressaoLogica2 &);
  ExpressaoLogica2 &operator=(const ExpressaoLogica2 &);
  ExpressaoLogica2(RegraLogico *p1);
  ~ExpressaoLogica2();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogica2 *clone() const;
  void swap(ExpressaoLogica2 &);
};

class ExpressaoLogicaExpressaoRelacional : public ExpressaoLogica
{
public:
  ExpressaoRelacional *expressaorelacional_;

  ExpressaoLogicaExpressaoRelacional(const ExpressaoLogicaExpressaoRelacional &);
  ExpressaoLogicaExpressaoRelacional &operator=(const ExpressaoLogicaExpressaoRelacional &);
  ExpressaoLogicaExpressaoRelacional(ExpressaoRelacional *p1);
  ~ExpressaoLogicaExpressaoRelacional();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogicaExpressaoRelacional *clone() const;
  void swap(ExpressaoLogicaExpressaoRelacional &);
};

class ExpressaoLogica3 : public ExpressaoLogica
{
public:
  ExpressaoRelacional *expressaorelacional_;
  RegraLogico *regralogico_;

  ExpressaoLogica3(const ExpressaoLogica3 &);
  ExpressaoLogica3 &operator=(const ExpressaoLogica3 &);
  ExpressaoLogica3(ExpressaoRelacional *p1, RegraLogico *p2);
  ~ExpressaoLogica3();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogica3 *clone() const;
  void swap(ExpressaoLogica3 &);
};

class ExpressaoLogica4 : public ExpressaoLogica
{
public:
  Negacao *negacao_;
  ExpressaoLogica *expressaologica_;

  ExpressaoLogica4(const ExpressaoLogica4 &);
  ExpressaoLogica4 &operator=(const ExpressaoLogica4 &);
  ExpressaoLogica4(Negacao *p1, ExpressaoLogica *p2);
  ~ExpressaoLogica4();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogica4 *clone() const;
  void swap(ExpressaoLogica4 &);
};

class ExpressaoLogica5 : public ExpressaoLogica
{
public:
  Negacao *negacao_;
  ExpressaoLogica *expressaologica_;
  RegraLogico *regralogico_;

  ExpressaoLogica5(const ExpressaoLogica5 &);
  ExpressaoLogica5 &operator=(const ExpressaoLogica5 &);
  ExpressaoLogica5(Negacao *p1, ExpressaoLogica *p2, RegraLogico *p3);
  ~ExpressaoLogica5();
  virtual void accept(Visitor *v);
  virtual ExpressaoLogica5 *clone() const;
  void swap(ExpressaoLogica5 &);
};

class RegraLogico1 : public RegraLogico
{
public:
  OperadorLogico *operadorlogico_;
  ExpressaoLogica *expressaologica_;

  RegraLogico1(const RegraLogico1 &);
  RegraLogico1 &operator=(const RegraLogico1 &);
  RegraLogico1(OperadorLogico *p1, ExpressaoLogica *p2);
  ~RegraLogico1();
  virtual void accept(Visitor *v);
  virtual RegraLogico1 *clone() const;
  void swap(RegraLogico1 &);
};

class RegraLogico2 : public RegraLogico
{
public:
  OperadorLogico *operadorlogico_;
  ExpressaoLogica *expressaologica_;
  RegraLogico *regralogico_;

  RegraLogico2(const RegraLogico2 &);
  RegraLogico2 &operator=(const RegraLogico2 &);
  RegraLogico2(OperadorLogico *p1, ExpressaoLogica *p2, RegraLogico *p3);
  ~RegraLogico2();
  virtual void accept(Visitor *v);
  virtual RegraLogico2 *clone() const;
  void swap(RegraLogico2 &);
};







#endif
