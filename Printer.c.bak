/* File generated by the BNF Converter (bnfc 2.9.4). */

/*** Pretty Printer and Abstract Syntax Viewer ***/

#include <ctype.h>   /* isspace */
#include <stddef.h>  /* size_t */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "Printer.h"

#define INDENT_WIDTH 2

int _n_;
char *buf_;
size_t cur_;
size_t buf_size;

/* You may wish to change the renderC functions */
void renderC(Char c)
{
  if (c == '{')
  {
     onEmptyLine();
     bufAppendC(c);
     _n_ = _n_ + INDENT_WIDTH;
     bufAppendC('\n');
     indent();
  }
  else if (c == '(' || c == '[')
     bufAppendC(c);
  else if (c == ')' || c == ']')
  {
     removeTrailingWhitespace();
     bufAppendC(c);
     bufAppendC(' ');
  }
  else if (c == '}')
  {
     _n_ = _n_ - INDENT_WIDTH;
     onEmptyLine();
     bufAppendC(c);
     bufAppendC('\n');
     indent();
  }
  else if (c == ',')
  {
     removeTrailingWhitespace();
     bufAppendC(c);
     bufAppendC(' ');
  }
  else if (c == ';')
  {
     removeTrailingWhitespace();
     bufAppendC(c);
     bufAppendC('\n');
     indent();
  }
  else if (c == ' ') bufAppendC(c);
  else if (c == 0) return;
  else
  {
     bufAppendC(c);
     bufAppendC(' ');
  }
}

int allIsSpace(String s)
{
  char c;
  while ((c = *s++))
    if (! isspace(c)) return 0;
  return 1;
}

void renderS(String s)
{
  if (*s) /* s[0] != '\0', string s not empty */
  {
    if (allIsSpace(s)) {
      backup();
      bufAppendS(s);
    } else {
      bufAppendS(s);
      bufAppendC(' ');
    }
  }
}

void indent(void)
{
  int n = _n_;
  while (--n >= 0)
    bufAppendC(' ');
}

void backup(void)
{
  if (cur_ && buf_[cur_ - 1] == ' ')
    buf_[--cur_] = 0;
}

void removeTrailingSpaces()
{
  while (cur_ && buf_[cur_ - 1] == ' ') --cur_;
  buf_[cur_] = 0;
}

void removeTrailingWhitespace()
{
  while (cur_ && (buf_[cur_ - 1] == ' ' || buf_[cur_ - 1] == '\n')) --cur_;
  buf_[cur_] = 0;
}

void onEmptyLine()
{
  removeTrailingSpaces();
  if (cur_ && buf_[cur_ - 1 ] != '\n') bufAppendC('\n');
  indent();
}
char *printEntry(Entry p)
{
  _n_ = 0;
  bufReset();
  ppEntry(p, 0);
  return buf_;
}
char *printBlocoDefinicoes(BlocoDefinicoes p)
{
  _n_ = 0;
  bufReset();
  ppBlocoDefinicoes(p, 0);
  return buf_;
}
char *printBlocoFuncaoEProc(BlocoFuncaoEProc p)
{
  _n_ = 0;
  bufReset();
  ppBlocoFuncaoEProc(p, 0);
  return buf_;
}
char *printBlocoConstante(BlocoConstante p)
{
  _n_ = 0;
  bufReset();
  ppBlocoConstante(p, 0);
  return buf_;
}
char *printRegraBlocoConstante(RegraBlocoConstante p)
{
  _n_ = 0;
  bufReset();
  ppRegraBlocoConstante(p, 0);
  return buf_;
}
char *printBlocoTipo(BlocoTipo p)
{
  _n_ = 0;
  bufReset();
  ppBlocoTipo(p, 0);
  return buf_;
}
char *printRegraBlocoTipo(RegraBlocoTipo p)
{
  _n_ = 0;
  bufReset();
  ppRegraBlocoTipo(p, 0);
  return buf_;
}
char *printBlocoVar(BlocoVar p)
{
  _n_ = 0;
  bufReset();
  ppBlocoVar(p, 0);
  return buf_;
}
char *printRegraBlocoVar(RegraBlocoVar p)
{
  _n_ = 0;
  bufReset();
  ppRegraBlocoVar(p, 0);
  return buf_;
}
char *printBlocoComando(BlocoComando p)
{
  _n_ = 0;
  bufReset();
  ppBlocoComando(p, 0);
  return buf_;
}
char *printRegraComando(RegraComando p)
{
  _n_ = 0;
  bufReset();
  ppRegraComando(p, 0);
  return buf_;
}
char *printComando(Comando p)
{
  _n_ = 0;
  bufReset();
  ppComando(p, 0);
  return buf_;
}
char *printAtribuicao(Atribuicao p)
{
  _n_ = 0;
  bufReset();
  ppAtribuicao(p, 0);
  return buf_;
}
char *printSubEscrito(SubEscrito p)
{
  _n_ = 0;
  bufReset();
  ppSubEscrito(p, 0);
  return buf_;
}
char *printRegraTipo(RegraTipo p)
{
  _n_ = 0;
  bufReset();
  ppRegraTipo(p, 0);
  return buf_;
}
char *printTipoPrimitivo(TipoPrimitivo p)
{
  _n_ = 0;
  bufReset();
  ppTipoPrimitivo(p, 0);
  return buf_;
}
char *printValor(Valor p)
{
  _n_ = 0;
  bufReset();
  ppValor(p, 0);
  return buf_;
}
char *printTipoDerivado(TipoDerivado p)
{
  _n_ = 0;
  bufReset();
  ppTipoDerivado(p, 0);
  return buf_;
}
char *printPonteiro(Ponteiro p)
{
  _n_ = 0;
  bufReset();
  ppPonteiro(p, 0);
  return buf_;
}
char *printVetor(Vetor p)
{
  _n_ = 0;
  bufReset();
  ppVetor(p, 0);
  return buf_;
}
char *printIf(If p)
{
  _n_ = 0;
  bufReset();
  ppIf(p, 0);
  return buf_;
}
char *printWhile(While p)
{
  _n_ = 0;
  bufReset();
  ppWhile(p, 0);
  return buf_;
}
char *printFor(For p)
{
  _n_ = 0;
  bufReset();
  ppFor(p, 0);
  return buf_;
}
char *printGoto(Goto p)
{
  _n_ = 0;
  bufReset();
  ppGoto(p, 0);
  return buf_;
}
char *printRotulo(Rotulo p)
{
  _n_ = 0;
  bufReset();
  ppRotulo(p, 0);
  return buf_;
}
char *printStruct(Struct p)
{
  _n_ = 0;
  bufReset();
  ppStruct(p, 0);
  return buf_;
}
char *printDefinicaoCampoStruct(DefinicaoCampoStruct p)
{
  _n_ = 0;
  bufReset();
  ppDefinicaoCampoStruct(p, 0);
  return buf_;
}
char *printAtribuicaoStruct(AtribuicaoStruct p)
{
  _n_ = 0;
  bufReset();
  ppAtribuicaoStruct(p, 0);
  return buf_;
}
char *printOperadorRelacional(OperadorRelacional p)
{
  _n_ = 0;
  bufReset();
  ppOperadorRelacional(p, 0);
  return buf_;
}
char *printOperadorLogico(OperadorLogico p)
{
  _n_ = 0;
  bufReset();
  ppOperadorLogico(p, 0);
  return buf_;
}
char *printOperadorAritmetico(OperadorAritmetico p)
{
  _n_ = 0;
  bufReset();
  ppOperadorAritmetico(p, 0);
  return buf_;
}
char *printCase(Case p)
{
  _n_ = 0;
  bufReset();
  ppCase(p, 0);
  return buf_;
}
char *printRegraSeletor(RegraSeletor p)
{
  _n_ = 0;
  bufReset();
  ppRegraSeletor(p, 0);
  return buf_;
}
char *printSeletor(Seletor p)
{
  _n_ = 0;
  bufReset();
  ppSeletor(p, 0);
  return buf_;
}
char *printChamadaFuncaoEProc(ChamadaFuncaoEProc p)
{
  _n_ = 0;
  bufReset();
  ppChamadaFuncaoEProc(p, 0);
  return buf_;
}
char *printListaIdent(ListaIdent p)
{
  _n_ = 0;
  bufReset();
  ppListaIdent(p, 0);
  return buf_;
}
char *printFuncao(Funcao p)
{
  _n_ = 0;
  bufReset();
  ppFuncao(p, 0);
  return buf_;
}
char *printProcedimento(Procedimento p)
{
  _n_ = 0;
  bufReset();
  ppProcedimento(p, 0);
  return buf_;
}
char *printExpressaoAritmetica(ExpressaoAritmetica p)
{
  _n_ = 0;
  bufReset();
  ppExpressaoAritmetica(p, 0);
  return buf_;
}
char *printOperando(Operando p)
{
  _n_ = 0;
  bufReset();
  ppOperando(p, 0);
  return buf_;
}
char *printRegraAritmetica(RegraAritmetica p)
{
  _n_ = 0;
  bufReset();
  ppRegraAritmetica(p, 0);
  return buf_;
}
char *printExpressaoRelacional(ExpressaoRelacional p)
{
  _n_ = 0;
  bufReset();
  ppExpressaoRelacional(p, 0);
  return buf_;
}
char *printRegraRelacional(RegraRelacional p)
{
  _n_ = 0;
  bufReset();
  ppRegraRelacional(p, 0);
  return buf_;
}
char *printExpressaoLogica(ExpressaoLogica p)
{
  _n_ = 0;
  bufReset();
  ppExpressaoLogica(p, 0);
  return buf_;
}
char *printRegraLogico(RegraLogico p)
{
  _n_ = 0;
  bufReset();
  ppRegraLogico(p, 0);
  return buf_;
}
char *showEntry(Entry p)
{
  _n_ = 0;
  bufReset();
  shEntry(p);
  return buf_;
}
char *showBlocoDefinicoes(BlocoDefinicoes p)
{
  _n_ = 0;
  bufReset();
  shBlocoDefinicoes(p);
  return buf_;
}
char *showBlocoFuncaoEProc(BlocoFuncaoEProc p)
{
  _n_ = 0;
  bufReset();
  shBlocoFuncaoEProc(p);
  return buf_;
}
char *showBlocoConstante(BlocoConstante p)
{
  _n_ = 0;
  bufReset();
  shBlocoConstante(p);
  return buf_;
}
char *showRegraBlocoConstante(RegraBlocoConstante p)
{
  _n_ = 0;
  bufReset();
  shRegraBlocoConstante(p);
  return buf_;
}
char *showBlocoTipo(BlocoTipo p)
{
  _n_ = 0;
  bufReset();
  shBlocoTipo(p);
  return buf_;
}
char *showRegraBlocoTipo(RegraBlocoTipo p)
{
  _n_ = 0;
  bufReset();
  shRegraBlocoTipo(p);
  return buf_;
}
char *showBlocoVar(BlocoVar p)
{
  _n_ = 0;
  bufReset();
  shBlocoVar(p);
  return buf_;
}
char *showRegraBlocoVar(RegraBlocoVar p)
{
  _n_ = 0;
  bufReset();
  shRegraBlocoVar(p);
  return buf_;
}
char *showBlocoComando(BlocoComando p)
{
  _n_ = 0;
  bufReset();
  shBlocoComando(p);
  return buf_;
}
char *showRegraComando(RegraComando p)
{
  _n_ = 0;
  bufReset();
  shRegraComando(p);
  return buf_;
}
char *showComando(Comando p)
{
  _n_ = 0;
  bufReset();
  shComando(p);
  return buf_;
}
char *showAtribuicao(Atribuicao p)
{
  _n_ = 0;
  bufReset();
  shAtribuicao(p);
  return buf_;
}
char *showSubEscrito(SubEscrito p)
{
  _n_ = 0;
  bufReset();
  shSubEscrito(p);
  return buf_;
}
char *showRegraTipo(RegraTipo p)
{
  _n_ = 0;
  bufReset();
  shRegraTipo(p);
  return buf_;
}
char *showTipoPrimitivo(TipoPrimitivo p)
{
  _n_ = 0;
  bufReset();
  shTipoPrimitivo(p);
  return buf_;
}
char *showValor(Valor p)
{
  _n_ = 0;
  bufReset();
  shValor(p);
  return buf_;
}
char *showTipoDerivado(TipoDerivado p)
{
  _n_ = 0;
  bufReset();
  shTipoDerivado(p);
  return buf_;
}
char *showPonteiro(Ponteiro p)
{
  _n_ = 0;
  bufReset();
  shPonteiro(p);
  return buf_;
}
char *showVetor(Vetor p)
{
  _n_ = 0;
  bufReset();
  shVetor(p);
  return buf_;
}
char *showIf(If p)
{
  _n_ = 0;
  bufReset();
  shIf(p);
  return buf_;
}
char *showWhile(While p)
{
  _n_ = 0;
  bufReset();
  shWhile(p);
  return buf_;
}
char *showFor(For p)
{
  _n_ = 0;
  bufReset();
  shFor(p);
  return buf_;
}
char *showGoto(Goto p)
{
  _n_ = 0;
  bufReset();
  shGoto(p);
  return buf_;
}
char *showRotulo(Rotulo p)
{
  _n_ = 0;
  bufReset();
  shRotulo(p);
  return buf_;
}
char *showStruct(Struct p)
{
  _n_ = 0;
  bufReset();
  shStruct(p);
  return buf_;
}
char *showDefinicaoCampoStruct(DefinicaoCampoStruct p)
{
  _n_ = 0;
  bufReset();
  shDefinicaoCampoStruct(p);
  return buf_;
}
char *showAtribuicaoStruct(AtribuicaoStruct p)
{
  _n_ = 0;
  bufReset();
  shAtribuicaoStruct(p);
  return buf_;
}
char *showOperadorRelacional(OperadorRelacional p)
{
  _n_ = 0;
  bufReset();
  shOperadorRelacional(p);
  return buf_;
}
char *showOperadorLogico(OperadorLogico p)
{
  _n_ = 0;
  bufReset();
  shOperadorLogico(p);
  return buf_;
}
char *showOperadorAritmetico(OperadorAritmetico p)
{
  _n_ = 0;
  bufReset();
  shOperadorAritmetico(p);
  return buf_;
}
char *showCase(Case p)
{
  _n_ = 0;
  bufReset();
  shCase(p);
  return buf_;
}
char *showRegraSeletor(RegraSeletor p)
{
  _n_ = 0;
  bufReset();
  shRegraSeletor(p);
  return buf_;
}
char *showSeletor(Seletor p)
{
  _n_ = 0;
  bufReset();
  shSeletor(p);
  return buf_;
}
char *showChamadaFuncaoEProc(ChamadaFuncaoEProc p)
{
  _n_ = 0;
  bufReset();
  shChamadaFuncaoEProc(p);
  return buf_;
}
char *showListaIdent(ListaIdent p)
{
  _n_ = 0;
  bufReset();
  shListaIdent(p);
  return buf_;
}
char *showFuncao(Funcao p)
{
  _n_ = 0;
  bufReset();
  shFuncao(p);
  return buf_;
}
char *showProcedimento(Procedimento p)
{
  _n_ = 0;
  bufReset();
  shProcedimento(p);
  return buf_;
}
char *showExpressaoAritmetica(ExpressaoAritmetica p)
{
  _n_ = 0;
  bufReset();
  shExpressaoAritmetica(p);
  return buf_;
}
char *showOperando(Operando p)
{
  _n_ = 0;
  bufReset();
  shOperando(p);
  return buf_;
}
char *showRegraAritmetica(RegraAritmetica p)
{
  _n_ = 0;
  bufReset();
  shRegraAritmetica(p);
  return buf_;
}
char *showExpressaoRelacional(ExpressaoRelacional p)
{
  _n_ = 0;
  bufReset();
  shExpressaoRelacional(p);
  return buf_;
}
char *showRegraRelacional(RegraRelacional p)
{
  _n_ = 0;
  bufReset();
  shRegraRelacional(p);
  return buf_;
}
char *showExpressaoLogica(ExpressaoLogica p)
{
  _n_ = 0;
  bufReset();
  shExpressaoLogica(p);
  return buf_;
}
char *showRegraLogico(RegraLogico p)
{
  _n_ = 0;
  bufReset();
  shRegraLogico(p);
  return buf_;
}
void ppEntry(Entry p, int _i_)
{
  switch(p->kind)
  {
  case is_L1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("programa");
    ppIdent(p->u.l1_.ident_, 0);
    renderC(';');
    ppBlocoDefinicoes(p->u.l1_.blocodefinicoes_, 0);
    ppBlocoComando(p->u.l1_.blococomando_, 0);
    renderC('.');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Entry!\n");
    exit(1);
  }
}

void ppBlocoDefinicoes(BlocoDefinicoes p, int _i_)
{
  switch(p->kind)
  {
  case is_BlocoDefinicoes1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppBlocoFuncaoEProc(p->u.blocodefinicoes1_.blocofuncaoeproc_, 0);
    ppBlocoDefinicoes(p->u.blocodefinicoes1_.blocodefinicoes_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoDefinicoes2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppBlocoConstante(p->u.blocodefinicoes2_.blococonstante_, 0);
    ppBlocoDefinicoes(p->u.blocodefinicoes2_.blocodefinicoes_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoDefinicoes3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppBlocoTipo(p->u.blocodefinicoes3_.blocotipo_, 0);
    ppBlocoDefinicoes(p->u.blocodefinicoes3_.blocodefinicoes_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoDefinicoes4:
    if (_i_ > 0) renderC(_L_PAREN);
    ppBlocoVar(p->u.blocodefinicoes4_.blocovar_, 0);
    ppBlocoDefinicoes(p->u.blocodefinicoes4_.blocodefinicoes_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoDefinicoes_:
    if (_i_ > 0) renderC(_L_PAREN);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoDefinicoes!\n");
    exit(1);
  }
}

void ppBlocoFuncaoEProc(BlocoFuncaoEProc p, int _i_)
{
  switch(p->kind)
  {
  case is_BlocoFuncaoEProcFuncao:
    if (_i_ > 0) renderC(_L_PAREN);
    ppFuncao(p->u.blocofuncaoeprocfuncao_.funcao_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoFuncaoEProc1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppFuncao(p->u.blocofuncaoeproc1_.funcao_, 0);
    ppBlocoFuncaoEProc(p->u.blocofuncaoeproc1_.blocofuncaoeproc_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoFuncaoEProcProcedimento:
    if (_i_ > 0) renderC(_L_PAREN);
    ppProcedimento(p->u.blocofuncaoeprocprocedimento_.procedimento_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoFuncaoEProc2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppProcedimento(p->u.blocofuncaoeproc2_.procedimento_, 0);
    ppBlocoFuncaoEProc(p->u.blocofuncaoeproc2_.blocofuncaoeproc_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoFuncaoEProc_:
    if (_i_ > 0) renderC(_L_PAREN);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoFuncaoEProc!\n");
    exit(1);
  }
}

void ppBlocoConstante(BlocoConstante p, int _i_)
{
  switch(p->kind)
  {
  case is_BlocoConstante1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("const");
    ppRegraBlocoConstante(p->u.blococonstante1_.regrablococonstante_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoConstante_:
    if (_i_ > 0) renderC(_L_PAREN);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoConstante!\n");
    exit(1);
  }
}

void ppRegraBlocoConstante(RegraBlocoConstante p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraBlocoConstante1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.regrablococonstante1_.ident_, 0);
    renderC('=');
    ppValor(p->u.regrablococonstante1_.valor_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraBlocoConstante2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.regrablococonstante2_.ident_, 0);
    renderC('=');
    ppValor(p->u.regrablococonstante2_.valor_, 0);
    renderC(';');
    ppRegraBlocoConstante(p->u.regrablococonstante2_.regrablococonstante_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraBlocoConstante!\n");
    exit(1);
  }
}

void ppBlocoTipo(BlocoTipo p, int _i_)
{
  switch(p->kind)
  {
  case is_BlocoTipo1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("tipo");
    ppRegraBlocoTipo(p->u.blocotipo1_.regrablocotipo_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoTipo_:
    if (_i_ > 0) renderC(_L_PAREN);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoTipo!\n");
    exit(1);
  }
}

void ppRegraBlocoTipo(RegraBlocoTipo p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraBlocoTipo1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.regrablocotipo1_.ident_, 0);
    renderC('=');
    ppRegraTipo(p->u.regrablocotipo1_.regratipo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraBlocoTipo2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.regrablocotipo2_.ident_, 0);
    renderC('=');
    ppRegraTipo(p->u.regrablocotipo2_.regratipo_, 0);
    renderC(';');
    ppRegraBlocoTipo(p->u.regrablocotipo2_.regrablocotipo_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraBlocoTipo!\n");
    exit(1);
  }
}

void ppBlocoVar(BlocoVar p, int _i_)
{
  switch(p->kind)
  {
  case is_BlocoVar1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("var");
    ppRegraBlocoVar(p->u.blocovar1_.regrablocovar_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoVar_:
    if (_i_ > 0) renderC(_L_PAREN);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoVar!\n");
    exit(1);
  }
}

void ppRegraBlocoVar(RegraBlocoVar p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraBlocoVar1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.regrablocovar1_.ident_, 0);
    renderC(':');
    ppRegraTipo(p->u.regrablocovar1_.regratipo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraBlocoVar2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.regrablocovar2_.ident_, 0);
    renderC(':');
    ppRegraTipo(p->u.regrablocovar2_.regratipo_, 0);
    renderC(';');
    ppRegraBlocoVar(p->u.regrablocovar2_.regrablocovar_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraBlocoVar3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppListaIdent(p->u.regrablocovar3_.listaident_, 0);
    renderC(':');
    ppRegraTipo(p->u.regrablocovar3_.regratipo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraBlocoVar4:
    if (_i_ > 0) renderC(_L_PAREN);
    ppListaIdent(p->u.regrablocovar4_.listaident_, 0);
    renderC(':');
    ppRegraTipo(p->u.regrablocovar4_.regratipo_, 0);
    renderC(';');
    ppRegraBlocoVar(p->u.regrablocovar4_.regrablocovar_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraBlocoVar!\n");
    exit(1);
  }
}

void ppBlocoComando(BlocoComando p, int _i_)
{
  switch(p->kind)
  {
  case is_BlocoComando1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("inicio");
    ppRegraComando(p->u.blococomando1_.regracomando_, 0);
    renderS("fim");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_BlocoComando_:
    if (_i_ > 0) renderC(_L_PAREN);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoComando!\n");
    exit(1);
  }
}

void ppRegraComando(RegraComando p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraComando1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppComando(p->u.regracomando1_.comando_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraComando2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppComando(p->u.regracomando2_.comando_, 0);
    renderC(';');
    ppRegraComando(p->u.regracomando2_.regracomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraComando!\n");
    exit(1);
  }
}

void ppComando(Comando p, int _i_)
{
  switch(p->kind)
  {
  case is_ComandoAtribuicao:
    if (_i_ > 0) renderC(_L_PAREN);
    ppAtribuicao(p->u.comandoatribuicao_.atribuicao_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ComandoIf:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIf(p->u.comandoif_.if_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ComandoWhile:
    if (_i_ > 0) renderC(_L_PAREN);
    ppWhile(p->u.comandowhile_.while_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ComandoFor:
    if (_i_ > 0) renderC(_L_PAREN);
    ppFor(p->u.comandofor_.for_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ComandoGoto:
    if (_i_ > 0) renderC(_L_PAREN);
    ppGoto(p->u.comandogoto_.goto_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ComandoCase:
    if (_i_ > 0) renderC(_L_PAREN);
    ppCase(p->u.comandocase_.case_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ComandoChamadaFuncaoEProc:
    if (_i_ > 0) renderC(_L_PAREN);
    ppChamadaFuncaoEProc(p->u.comandochamadafuncaoeproc_.chamadafuncaoeproc_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Comando!\n");
    exit(1);
  }
}

void ppAtribuicao(Atribuicao p, int _i_)
{
  switch(p->kind)
  {
  case is_Atribuicao1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.atribuicao1_.ident_, 0);
    renderS(":=");
    ppValor(p->u.atribuicao1_.valor_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Atribuicao2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.atribuicao2_.ident_1, 0);
    renderS(":=");
    ppIdent(p->u.atribuicao2_.ident_2, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Atribuicao3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.atribuicao3_.ident_, 0);
    renderC('[');
    ppSubEscrito(p->u.atribuicao3_.subescrito_, 0);
    renderC(']');
    renderS(":=");
    ppValor(p->u.atribuicao3_.valor_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Atribuicao4:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.atribuicao4_.ident_, 0);
    renderC('^');
    renderS(":=");
    ppValor(p->u.atribuicao4_.valor_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_AtribuicaoAtribuicaoStruct:
    if (_i_ > 0) renderC(_L_PAREN);
    ppAtribuicaoStruct(p->u.atribuicaoatribuicaostruct_.atribuicaostruct_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Atribuicao5:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.atribuicao5_.ident_, 0);
    renderS(":=");
    ppChamadaFuncaoEProc(p->u.atribuicao5_.chamadafuncaoeproc_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Atribuicao!\n");
    exit(1);
  }
}

void ppSubEscrito(SubEscrito p, int _i_)
{
  switch(p->kind)
  {
  case is_SubEscritoIdent:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.subescritoident_.ident_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_SubEscritoInteger:
    if (_i_ > 0) renderC(_L_PAREN);
    ppInteger(p->u.subescritointeger_.integer_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing SubEscrito!\n");
    exit(1);
  }
}

void ppRegraTipo(RegraTipo p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraTipoTipoPrimitivo:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTipoPrimitivo(p->u.regratipotipoprimitivo_.tipoprimitivo_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraTipoTipoDerivado:
    if (_i_ > 0) renderC(_L_PAREN);
    ppTipoDerivado(p->u.regratipotipoderivado_.tipoderivado_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraTipoIdent:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.regratipoident_.ident_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraTipo!\n");
    exit(1);
  }
}

void ppTipoPrimitivo(TipoPrimitivo p, int _i_)
{
  switch(p->kind)
  {
  case is_TipoPrimitivo_int:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("int");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_TipoPrimitivo_real:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("real");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_TipoPrimitivo_char:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("char");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing TipoPrimitivo!\n");
    exit(1);
  }
}

void ppValor(Valor p, int _i_)
{
  switch(p->kind)
  {
  case is_ValorInteger:
    if (_i_ > 0) renderC(_L_PAREN);
    ppInteger(p->u.valorinteger_.integer_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ValorDouble:
    if (_i_ > 0) renderC(_L_PAREN);
    ppDouble(p->u.valordouble_.double_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ValorChar:
    if (_i_ > 0) renderC(_L_PAREN);
    ppChar(p->u.valorchar_.char_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ValorString:
    if (_i_ > 0) renderC(_L_PAREN);
    ppString(p->u.valorstring_.string_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ValorExpressaoAritmetica:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressaoAritmetica(p->u.valorexpressaoaritmetica_.expressaoaritmetica_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Valor!\n");
    exit(1);
  }
}

void ppTipoDerivado(TipoDerivado p, int _i_)
{
  switch(p->kind)
  {
  case is_TipoDerivadoPonteiro:
    if (_i_ > 0) renderC(_L_PAREN);
    ppPonteiro(p->u.tipoderivadoponteiro_.ponteiro_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_TipoDerivadoVetor:
    if (_i_ > 0) renderC(_L_PAREN);
    ppVetor(p->u.tipoderivadovetor_.vetor_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_TipoDerivadoStruct:
    if (_i_ > 0) renderC(_L_PAREN);
    ppStruct(p->u.tipoderivadostruct_.struct_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing TipoDerivado!\n");
    exit(1);
  }
}

void ppPonteiro(Ponteiro p, int _i_)
{
  switch(p->kind)
  {
  case is_Ponteiro1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('^');
    ppTipoPrimitivo(p->u.ponteiro1_.tipoprimitivo_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Ponteiro2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('^');
    ppTipoDerivado(p->u.ponteiro2_.tipoderivado_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Ponteiro!\n");
    exit(1);
  }
}

void ppVetor(Vetor p, int _i_)
{
  switch(p->kind)
  {
  case is_L7:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("vetor");
    renderC('[');
    ppInteger(p->u.l7_.integer_1, 0);
    renderS("..");
    ppInteger(p->u.l7_.integer_2, 0);
    renderC(']');
    renderS("de");
    ppTipoPrimitivo(p->u.l7_.tipoprimitivo_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Vetor!\n");
    exit(1);
  }
}

void ppIf(If p, int _i_)
{
  switch(p->kind)
  {
  case is_If1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("se");
    renderC('(');
    ppExpressaoLogica(p->u.if1_.expressaologica_, 0);
    renderC(')');
    renderS("entao");
    ppBlocoComando(p->u.if1_.blococomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_If2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("se");
    ppExpressaoLogica(p->u.if2_.expressaologica_, 0);
    renderS("entao");
    ppBlocoComando(p->u.if2_.blococomando_1, 0);
    renderS("senao");
    ppBlocoComando(p->u.if2_.blococomando_2, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing If!\n");
    exit(1);
  }
}

void ppWhile(While p, int _i_)
{
  switch(p->kind)
  {
  case is_L8:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("enquanto");
    renderC('(');
    ppExpressaoLogica(p->u.l8_.expressaologica_, 0);
    renderC(')');
    renderS("faca");
    ppBlocoComando(p->u.l8_.blococomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing While!\n");
    exit(1);
  }
}

void ppFor(For p, int _i_)
{
  switch(p->kind)
  {
  case is_For1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("para");
    ppAtribuicao(p->u.for1_.atribuicao_, 0);
    renderS("ate");
    ppInteger(p->u.for1_.integer_, 0);
    renderS("faca");
    ppBlocoComando(p->u.for1_.blococomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_For2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("para");
    ppAtribuicao(p->u.for2_.atribuicao_, 0);
    renderS("ate");
    ppIdent(p->u.for2_.ident_, 0);
    renderS("faca");
    ppBlocoComando(p->u.for2_.blococomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing For!\n");
    exit(1);
  }
}

void ppGoto(Goto p, int _i_)
{
  switch(p->kind)
  {
  case is_L9:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("sovai");
    ppIdent(p->u.l9_.ident_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Goto!\n");
    exit(1);
  }
}

void ppRotulo(Rotulo p, int _i_)
{
  switch(p->kind)
  {
  case is_L10:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.l10_.ident_, 0);
    renderC(':');
    ppRegraComando(p->u.l10_.regracomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Rotulo!\n");
    exit(1);
  }
}

void ppStruct(Struct p, int _i_)
{
  switch(p->kind)
  {
  case is_L11:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("registro");
    ppDefinicaoCampoStruct(p->u.l11_.definicaocampostruct_, 0);
    renderS("fim");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Struct!\n");
    exit(1);
  }
}

void ppDefinicaoCampoStruct(DefinicaoCampoStruct p, int _i_)
{
  switch(p->kind)
  {
  case is_DefinicaoCampoStruct1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.definicaocampostruct1_.ident_, 0);
    renderC(':');
    ppRegraTipo(p->u.definicaocampostruct1_.regratipo_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_DefinicaoCampoStruct2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.definicaocampostruct2_.ident_, 0);
    renderC(':');
    ppRegraTipo(p->u.definicaocampostruct2_.regratipo_, 0);
    renderC(';');
    ppDefinicaoCampoStruct(p->u.definicaocampostruct2_.definicaocampostruct_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing DefinicaoCampoStruct!\n");
    exit(1);
  }
}

void ppAtribuicaoStruct(AtribuicaoStruct p, int _i_)
{
  switch(p->kind)
  {
  case is_AtribuicaoStruct1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.atribuicaostruct1_.ident_1, 0);
    renderC('.');
    ppIdent(p->u.atribuicaostruct1_.ident_2, 0);
    renderS(":=");
    ppValor(p->u.atribuicaostruct1_.valor_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_AtribuicaoStruct2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.atribuicaostruct2_.ident_1, 0);
    renderC('.');
    ppIdent(p->u.atribuicaostruct2_.ident_2, 0);
    renderS(":=");
    ppValor(p->u.atribuicaostruct2_.valor_, 0);
    ppAtribuicaoStruct(p->u.atribuicaostruct2_.atribuicaostruct_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing AtribuicaoStruct!\n");
    exit(1);
  }
}

void ppOperadorRelacional(OperadorRelacional p, int _i_)
{
  switch(p->kind)
  {
  case is_OperadorRelacional1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('>');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorRelacional2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('<');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorRelacional3:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("<>");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorRelacional4:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS(">=");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorRelacional5:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("<=");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorRelacional6:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('=');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing OperadorRelacional!\n");
    exit(1);
  }
}

void ppOperadorLogico(OperadorLogico p, int _i_)
{
  switch(p->kind)
  {
  case is_OperadorLogico1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('!');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorLogico2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("&&");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorLogico3:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("||");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorLogico4:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("&|");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing OperadorLogico!\n");
    exit(1);
  }
}

void ppOperadorAritmetico(OperadorAritmetico p, int _i_)
{
  switch(p->kind)
  {
  case is_OperadorAritmetico1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('+');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorAritmetico2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('-');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorAritmetico3:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('*');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperadorAritmetico4:
    if (_i_ > 0) renderC(_L_PAREN);
    renderC('/');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing OperadorAritmetico!\n");
    exit(1);
  }
}

void ppCase(Case p, int _i_)
{
  switch(p->kind)
  {
  case is_L12:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("caso");
    renderC('(');
    ppSeletor(p->u.l12_.seletor_, 0);
    renderC(')');
    renderS("de");
    ppRegraSeletor(p->u.l12_.regraseletor_, 0);
    renderS("fim");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Case!\n");
    exit(1);
  }
}

void ppRegraSeletor(RegraSeletor p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraSeletor1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppSeletor(p->u.regraseletor1_.seletor_, 0);
    renderC(':');
    ppComando(p->u.regraseletor1_.comando_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraSeletor2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppSeletor(p->u.regraseletor2_.seletor_, 0);
    renderC(':');
    ppComando(p->u.regraseletor2_.comando_, 0);
    renderC(';');
    ppRegraSeletor(p->u.regraseletor2_.regraseletor_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraSeletor!\n");
    exit(1);
  }
}

void ppSeletor(Seletor p, int _i_)
{
  switch(p->kind)
  {
  case is_SeletorInteger:
    if (_i_ > 0) renderC(_L_PAREN);
    ppInteger(p->u.seletorinteger_.integer_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_SeletorChar:
    if (_i_ > 0) renderC(_L_PAREN);
    ppChar(p->u.seletorchar_.char_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_SeletorIdent:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.seletorident_.ident_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Seletor!\n");
    exit(1);
  }
}

void ppChamadaFuncaoEProc(ChamadaFuncaoEProc p, int _i_)
{
  switch(p->kind)
  {
  case is_L33:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.l33_.ident_, 0);
    renderC('(');
    ppListaIdent(p->u.l33_.listaident_, 0);
    renderC(')');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ChamadaFuncaoEProc!\n");
    exit(1);
  }
}

void ppListaIdent(ListaIdent p, int _i_)
{
  switch(p->kind)
  {
  case is_ListaIdentIdent:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.listaidentident_.ident_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ListaIdent1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.listaident1_.ident_, 0);
    renderC(',');
    ppListaIdent(p->u.listaident1_.listaident_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ListaIdent!\n");
    exit(1);
  }
}

void ppFuncao(Funcao p, int _i_)
{
  switch(p->kind)
  {
  case is_L13:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("funcao");
    ppIdent(p->u.l13_.ident_, 0);
    renderC('(');
    ppRegraBlocoVar(p->u.l13_.regrablocovar_, 0);
    renderC(')');
    renderC(':');
    ppRegraTipo(p->u.l13_.regratipo_, 0);
    ppBlocoVar(p->u.l13_.blocovar_, 0);
    ppBlocoComando(p->u.l13_.blococomando_, 0);
    renderC(';');
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Funcao!\n");
    exit(1);
  }
}

void ppProcedimento(Procedimento p, int _i_)
{
  switch(p->kind)
  {
  case is_Procedimento1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("procedimento");
    ppIdent(p->u.procedimento1_.ident_, 0);
    renderC('(');
    ppRegraBlocoVar(p->u.procedimento1_.regrablocovar_, 0);
    renderC(')');
    ppBlocoVar(p->u.procedimento1_.blocovar_, 0);
    ppBlocoComando(p->u.procedimento1_.blococomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_Procedimento2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("procedimento");
    ppIdent(p->u.procedimento2_.ident_, 0);
    renderC('(');
    renderC(')');
    ppBlocoVar(p->u.procedimento2_.blocovar_, 0);
    ppBlocoComando(p->u.procedimento2_.blococomando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Procedimento!\n");
    exit(1);
  }
}

void ppExpressaoAritmetica(ExpressaoAritmetica p, int _i_)
{
  switch(p->kind)
  {
  case is_L14:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperando(p->u.l14_.operando_, 0);
    ppRegraAritmetica(p->u.l14_.regraaritmetica_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ExpressaoAritmetica!\n");
    exit(1);
  }
}

void ppOperando(Operando p, int _i_)
{
  switch(p->kind)
  {
  case is_OperandoInteger:
    if (_i_ > 0) renderC(_L_PAREN);
    ppInteger(p->u.operandointeger_.integer_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperandoDouble:
    if (_i_ > 0) renderC(_L_PAREN);
    ppDouble(p->u.operandodouble_.double_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_OperandoIdent:
    if (_i_ > 0) renderC(_L_PAREN);
    ppIdent(p->u.operandoident_.ident_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Operando!\n");
    exit(1);
  }
}

void ppRegraAritmetica(RegraAritmetica p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraAritmetica1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorAritmetico(p->u.regraaritmetica1_.operadoraritmetico_, 0);
    ppOperando(p->u.regraaritmetica1_.operando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraAritmetica2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorAritmetico(p->u.regraaritmetica2_.operadoraritmetico_, 0);
    ppOperando(p->u.regraaritmetica2_.operando_, 0);
    ppRegraAritmetica(p->u.regraaritmetica2_.regraaritmetica_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraAritmetica!\n");
    exit(1);
  }
}

void ppExpressaoRelacional(ExpressaoRelacional p, int _i_)
{
  switch(p->kind)
  {
  case is_ExpressaoRelacional1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperando(p->u.expressaorelacional1_.operando_, 0);
    ppRegraRelacional(p->u.expressaorelacional1_.regrarelacional_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoRelacional2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressaoAritmetica(p->u.expressaorelacional2_.expressaoaritmetica_, 0);
    ppRegraRelacional(p->u.expressaorelacional2_.regrarelacional_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ExpressaoRelacional!\n");
    exit(1);
  }
}

void ppRegraRelacional(RegraRelacional p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraRelacional1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorRelacional(p->u.regrarelacional1_.operadorrelacional_, 0);
    ppOperando(p->u.regrarelacional1_.operando_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraRelacional2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorRelacional(p->u.regrarelacional2_.operadorrelacional_, 0);
    ppExpressaoAritmetica(p->u.regrarelacional2_.expressaoaritmetica_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraRelacional!\n");
    exit(1);
  }
}

void ppExpressaoLogica(ExpressaoLogica p, int _i_)
{
  switch(p->kind)
  {
  case is_ExpressaoLogica_falso:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("falso");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoLogica_verdadeiro:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("verdadeiro");
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoLogicaExpressaoRelacional:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressaoRelacional(p->u.expressaologicaexpressaorelacional_.expressaorelacional_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoLogica1:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("falso");
    ppRegraLogico(p->u.expressaologica1_.regralogico_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoLogica2:
    if (_i_ > 0) renderC(_L_PAREN);
    renderS("verdadeiro");
    ppRegraLogico(p->u.expressaologica2_.regralogico_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoLogica3:
    if (_i_ > 0) renderC(_L_PAREN);
    ppExpressaoRelacional(p->u.expressaologica3_.expressaorelacional_, 0);
    ppRegraLogico(p->u.expressaologica3_.regralogico_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoLogica4:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorLogico(p->u.expressaologica4_.operadorlogico_, 0);
    ppExpressaoLogica(p->u.expressaologica4_.expressaologica_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_ExpressaoLogica5:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorLogico(p->u.expressaologica5_.operadorlogico_, 0);
    ppExpressaoLogica(p->u.expressaologica5_.expressaologica_, 0);
    ppRegraLogico(p->u.expressaologica5_.regralogico_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ExpressaoLogica!\n");
    exit(1);
  }
}

void ppRegraLogico(RegraLogico p, int _i_)
{
  switch(p->kind)
  {
  case is_RegraLogico1:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorLogico(p->u.regralogico1_.operadorlogico_, 0);
    ppExpressaoLogica(p->u.regralogico1_.expressaologica_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  case is_RegraLogico2:
    if (_i_ > 0) renderC(_L_PAREN);
    ppOperadorLogico(p->u.regralogico2_.operadorlogico_, 0);
    ppExpressaoLogica(p->u.regralogico2_.expressaologica_, 0);
    ppRegraLogico(p->u.regralogico2_.regralogico_, 0);
    if (_i_ > 0) renderC(_R_PAREN);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraLogico!\n");
    exit(1);
  }
}

void ppInteger(Integer n, int i)
{
  char tmp[20];
  sprintf(tmp, "%d", n);
  renderS(tmp);
}
void ppDouble(Double d, int i)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  renderS(tmp);
}
void ppChar(Char c, int i)
{
  char tmp[4];
  sprintf(tmp, "'%c'", c);
  renderS(tmp);
}
void ppString(String s, int i)
{
  bufAppendC('\"');
  bufAppendS(s);
  bufAppendC('\"');
  bufAppendC(' ');
}
void ppIdent(String s, int i)
{
  renderS(s);
}

void shEntry(Entry p)
{
  switch(p->kind)
  {
  case is_L1:
    bufAppendC('(');

    bufAppendS("L1");

    bufAppendC(' ');

    shIdent(p->u.l1_.ident_);
  bufAppendC(' ');
    shBlocoDefinicoes(p->u.l1_.blocodefinicoes_);
  bufAppendC(' ');
    shBlocoComando(p->u.l1_.blococomando_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Entry!\n");
    exit(1);
  }
}

void shBlocoDefinicoes(BlocoDefinicoes p)
{
  switch(p->kind)
  {
  case is_BlocoDefinicoes1:
    bufAppendC('(');

    bufAppendS("BlocoDefinicoes1");

    bufAppendC(' ');

    shBlocoFuncaoEProc(p->u.blocodefinicoes1_.blocofuncaoeproc_);
  bufAppendC(' ');
    shBlocoDefinicoes(p->u.blocodefinicoes1_.blocodefinicoes_);

    bufAppendC(')');

    break;
  case is_BlocoDefinicoes2:
    bufAppendC('(');

    bufAppendS("BlocoDefinicoes2");

    bufAppendC(' ');

    shBlocoConstante(p->u.blocodefinicoes2_.blococonstante_);
  bufAppendC(' ');
    shBlocoDefinicoes(p->u.blocodefinicoes2_.blocodefinicoes_);

    bufAppendC(')');

    break;
  case is_BlocoDefinicoes3:
    bufAppendC('(');

    bufAppendS("BlocoDefinicoes3");

    bufAppendC(' ');

    shBlocoTipo(p->u.blocodefinicoes3_.blocotipo_);
  bufAppendC(' ');
    shBlocoDefinicoes(p->u.blocodefinicoes3_.blocodefinicoes_);

    bufAppendC(')');

    break;
  case is_BlocoDefinicoes4:
    bufAppendC('(');

    bufAppendS("BlocoDefinicoes4");

    bufAppendC(' ');

    shBlocoVar(p->u.blocodefinicoes4_.blocovar_);
  bufAppendC(' ');
    shBlocoDefinicoes(p->u.blocodefinicoes4_.blocodefinicoes_);

    bufAppendC(')');

    break;
  case is_BlocoDefinicoes_:

    bufAppendS("BlocoDefinicoes_");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing BlocoDefinicoes!\n");
    exit(1);
  }
}

void shBlocoFuncaoEProc(BlocoFuncaoEProc p)
{
  switch(p->kind)
  {
  case is_BlocoFuncaoEProcFuncao:
    bufAppendC('(');

    bufAppendS("BlocoFuncaoEProcFuncao");

    bufAppendC(' ');

    shFuncao(p->u.blocofuncaoeprocfuncao_.funcao_);

    bufAppendC(')');

    break;
  case is_BlocoFuncaoEProc1:
    bufAppendC('(');

    bufAppendS("BlocoFuncaoEProc1");

    bufAppendC(' ');

    shFuncao(p->u.blocofuncaoeproc1_.funcao_);
  bufAppendC(' ');
    shBlocoFuncaoEProc(p->u.blocofuncaoeproc1_.blocofuncaoeproc_);

    bufAppendC(')');

    break;
  case is_BlocoFuncaoEProcProcedimento:
    bufAppendC('(');

    bufAppendS("BlocoFuncaoEProcProcedimento");

    bufAppendC(' ');

    shProcedimento(p->u.blocofuncaoeprocprocedimento_.procedimento_);

    bufAppendC(')');

    break;
  case is_BlocoFuncaoEProc2:
    bufAppendC('(');

    bufAppendS("BlocoFuncaoEProc2");

    bufAppendC(' ');

    shProcedimento(p->u.blocofuncaoeproc2_.procedimento_);
  bufAppendC(' ');
    shBlocoFuncaoEProc(p->u.blocofuncaoeproc2_.blocofuncaoeproc_);

    bufAppendC(')');

    break;
  case is_BlocoFuncaoEProc_:

    bufAppendS("BlocoFuncaoEProc_");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing BlocoFuncaoEProc!\n");
    exit(1);
  }
}

void shBlocoConstante(BlocoConstante p)
{
  switch(p->kind)
  {
  case is_BlocoConstante1:
    bufAppendC('(');

    bufAppendS("BlocoConstante1");

    bufAppendC(' ');

    shRegraBlocoConstante(p->u.blococonstante1_.regrablococonstante_);

    bufAppendC(')');

    break;
  case is_BlocoConstante_:

    bufAppendS("BlocoConstante_");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing BlocoConstante!\n");
    exit(1);
  }
}

void shRegraBlocoConstante(RegraBlocoConstante p)
{
  switch(p->kind)
  {
  case is_RegraBlocoConstante1:
    bufAppendC('(');

    bufAppendS("RegraBlocoConstante1");

    bufAppendC(' ');

    shIdent(p->u.regrablococonstante1_.ident_);
  bufAppendC(' ');
    shValor(p->u.regrablococonstante1_.valor_);

    bufAppendC(')');

    break;
  case is_RegraBlocoConstante2:
    bufAppendC('(');

    bufAppendS("RegraBlocoConstante2");

    bufAppendC(' ');

    shIdent(p->u.regrablococonstante2_.ident_);
  bufAppendC(' ');
    shValor(p->u.regrablococonstante2_.valor_);
  bufAppendC(' ');
    shRegraBlocoConstante(p->u.regrablococonstante2_.regrablococonstante_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraBlocoConstante!\n");
    exit(1);
  }
}

void shBlocoTipo(BlocoTipo p)
{
  switch(p->kind)
  {
  case is_BlocoTipo1:
    bufAppendC('(');

    bufAppendS("BlocoTipo1");

    bufAppendC(' ');

    shRegraBlocoTipo(p->u.blocotipo1_.regrablocotipo_);

    bufAppendC(')');

    break;
  case is_BlocoTipo_:

    bufAppendS("BlocoTipo_");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing BlocoTipo!\n");
    exit(1);
  }
}

void shRegraBlocoTipo(RegraBlocoTipo p)
{
  switch(p->kind)
  {
  case is_RegraBlocoTipo1:
    bufAppendC('(');

    bufAppendS("RegraBlocoTipo1");

    bufAppendC(' ');

    shIdent(p->u.regrablocotipo1_.ident_);
  bufAppendC(' ');
    shRegraTipo(p->u.regrablocotipo1_.regratipo_);

    bufAppendC(')');

    break;
  case is_RegraBlocoTipo2:
    bufAppendC('(');

    bufAppendS("RegraBlocoTipo2");

    bufAppendC(' ');

    shIdent(p->u.regrablocotipo2_.ident_);
  bufAppendC(' ');
    shRegraTipo(p->u.regrablocotipo2_.regratipo_);
  bufAppendC(' ');
    shRegraBlocoTipo(p->u.regrablocotipo2_.regrablocotipo_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraBlocoTipo!\n");
    exit(1);
  }
}

void shBlocoVar(BlocoVar p)
{
  switch(p->kind)
  {
  case is_BlocoVar1:
    bufAppendC('(');

    bufAppendS("BlocoVar1");

    bufAppendC(' ');

    shRegraBlocoVar(p->u.blocovar1_.regrablocovar_);

    bufAppendC(')');

    break;
  case is_BlocoVar_:

    bufAppendS("BlocoVar_");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing BlocoVar!\n");
    exit(1);
  }
}

void shRegraBlocoVar(RegraBlocoVar p)
{
  switch(p->kind)
  {
  case is_RegraBlocoVar1:
    bufAppendC('(');

    bufAppendS("RegraBlocoVar1");

    bufAppendC(' ');

    shIdent(p->u.regrablocovar1_.ident_);
  bufAppendC(' ');
    shRegraTipo(p->u.regrablocovar1_.regratipo_);

    bufAppendC(')');

    break;
  case is_RegraBlocoVar2:
    bufAppendC('(');

    bufAppendS("RegraBlocoVar2");

    bufAppendC(' ');

    shIdent(p->u.regrablocovar2_.ident_);
  bufAppendC(' ');
    shRegraTipo(p->u.regrablocovar2_.regratipo_);
  bufAppendC(' ');
    shRegraBlocoVar(p->u.regrablocovar2_.regrablocovar_);

    bufAppendC(')');

    break;
  case is_RegraBlocoVar3:
    bufAppendC('(');

    bufAppendS("RegraBlocoVar3");

    bufAppendC(' ');

    shListaIdent(p->u.regrablocovar3_.listaident_);
  bufAppendC(' ');
    shRegraTipo(p->u.regrablocovar3_.regratipo_);

    bufAppendC(')');

    break;
  case is_RegraBlocoVar4:
    bufAppendC('(');

    bufAppendS("RegraBlocoVar4");

    bufAppendC(' ');

    shListaIdent(p->u.regrablocovar4_.listaident_);
  bufAppendC(' ');
    shRegraTipo(p->u.regrablocovar4_.regratipo_);
  bufAppendC(' ');
    shRegraBlocoVar(p->u.regrablocovar4_.regrablocovar_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraBlocoVar!\n");
    exit(1);
  }
}

void shBlocoComando(BlocoComando p)
{
  switch(p->kind)
  {
  case is_BlocoComando1:
    bufAppendC('(');

    bufAppendS("BlocoComando1");

    bufAppendC(' ');

    shRegraComando(p->u.blococomando1_.regracomando_);

    bufAppendC(')');

    break;
  case is_BlocoComando_:

    bufAppendS("BlocoComando_");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing BlocoComando!\n");
    exit(1);
  }
}

void shRegraComando(RegraComando p)
{
  switch(p->kind)
  {
  case is_RegraComando1:
    bufAppendC('(');

    bufAppendS("RegraComando1");

    bufAppendC(' ');

    shComando(p->u.regracomando1_.comando_);

    bufAppendC(')');

    break;
  case is_RegraComando2:
    bufAppendC('(');

    bufAppendS("RegraComando2");

    bufAppendC(' ');

    shComando(p->u.regracomando2_.comando_);
  bufAppendC(' ');
    shRegraComando(p->u.regracomando2_.regracomando_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraComando!\n");
    exit(1);
  }
}

void shComando(Comando p)
{
  switch(p->kind)
  {
  case is_ComandoAtribuicao:
    bufAppendC('(');

    bufAppendS("ComandoAtribuicao");

    bufAppendC(' ');

    shAtribuicao(p->u.comandoatribuicao_.atribuicao_);

    bufAppendC(')');

    break;
  case is_ComandoIf:
    bufAppendC('(');

    bufAppendS("ComandoIf");

    bufAppendC(' ');

    shIf(p->u.comandoif_.if_);

    bufAppendC(')');

    break;
  case is_ComandoWhile:
    bufAppendC('(');

    bufAppendS("ComandoWhile");

    bufAppendC(' ');

    shWhile(p->u.comandowhile_.while_);

    bufAppendC(')');

    break;
  case is_ComandoFor:
    bufAppendC('(');

    bufAppendS("ComandoFor");

    bufAppendC(' ');

    shFor(p->u.comandofor_.for_);

    bufAppendC(')');

    break;
  case is_ComandoGoto:
    bufAppendC('(');

    bufAppendS("ComandoGoto");

    bufAppendC(' ');

    shGoto(p->u.comandogoto_.goto_);

    bufAppendC(')');

    break;
  case is_ComandoCase:
    bufAppendC('(');

    bufAppendS("ComandoCase");

    bufAppendC(' ');

    shCase(p->u.comandocase_.case_);

    bufAppendC(')');

    break;
  case is_ComandoChamadaFuncaoEProc:
    bufAppendC('(');

    bufAppendS("ComandoChamadaFuncaoEProc");

    bufAppendC(' ');

    shChamadaFuncaoEProc(p->u.comandochamadafuncaoeproc_.chamadafuncaoeproc_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Comando!\n");
    exit(1);
  }
}

void shAtribuicao(Atribuicao p)
{
  switch(p->kind)
  {
  case is_Atribuicao1:
    bufAppendC('(');

    bufAppendS("Atribuicao1");

    bufAppendC(' ');

    shIdent(p->u.atribuicao1_.ident_);
  bufAppendC(' ');
    shValor(p->u.atribuicao1_.valor_);

    bufAppendC(')');

    break;
  case is_Atribuicao2:
    bufAppendC('(');

    bufAppendS("Atribuicao2");

    bufAppendC(' ');

    shIdent(p->u.atribuicao2_.ident_1);
  bufAppendC(' ');
    shIdent(p->u.atribuicao2_.ident_2);

    bufAppendC(')');

    break;
  case is_Atribuicao3:
    bufAppendC('(');

    bufAppendS("Atribuicao3");

    bufAppendC(' ');

    shIdent(p->u.atribuicao3_.ident_);
  bufAppendC(' ');
    shSubEscrito(p->u.atribuicao3_.subescrito_);
  bufAppendC(' ');
    shValor(p->u.atribuicao3_.valor_);

    bufAppendC(')');

    break;
  case is_Atribuicao4:
    bufAppendC('(');

    bufAppendS("Atribuicao4");

    bufAppendC(' ');

    shIdent(p->u.atribuicao4_.ident_);
  bufAppendC(' ');
    shValor(p->u.atribuicao4_.valor_);

    bufAppendC(')');

    break;
  case is_AtribuicaoAtribuicaoStruct:
    bufAppendC('(');

    bufAppendS("AtribuicaoAtribuicaoStruct");

    bufAppendC(' ');

    shAtribuicaoStruct(p->u.atribuicaoatribuicaostruct_.atribuicaostruct_);

    bufAppendC(')');

    break;
  case is_Atribuicao5:
    bufAppendC('(');

    bufAppendS("Atribuicao5");

    bufAppendC(' ');

    shIdent(p->u.atribuicao5_.ident_);
  bufAppendC(' ');
    shChamadaFuncaoEProc(p->u.atribuicao5_.chamadafuncaoeproc_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Atribuicao!\n");
    exit(1);
  }
}

void shSubEscrito(SubEscrito p)
{
  switch(p->kind)
  {
  case is_SubEscritoIdent:
    bufAppendC('(');

    bufAppendS("SubEscritoIdent");

    bufAppendC(' ');

    shIdent(p->u.subescritoident_.ident_);

    bufAppendC(')');

    break;
  case is_SubEscritoInteger:
    bufAppendC('(');

    bufAppendS("SubEscritoInteger");

    bufAppendC(' ');

    shInteger(p->u.subescritointeger_.integer_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing SubEscrito!\n");
    exit(1);
  }
}

void shRegraTipo(RegraTipo p)
{
  switch(p->kind)
  {
  case is_RegraTipoTipoPrimitivo:
    bufAppendC('(');

    bufAppendS("RegraTipoTipoPrimitivo");

    bufAppendC(' ');

    shTipoPrimitivo(p->u.regratipotipoprimitivo_.tipoprimitivo_);

    bufAppendC(')');

    break;
  case is_RegraTipoTipoDerivado:
    bufAppendC('(');

    bufAppendS("RegraTipoTipoDerivado");

    bufAppendC(' ');

    shTipoDerivado(p->u.regratipotipoderivado_.tipoderivado_);

    bufAppendC(')');

    break;
  case is_RegraTipoIdent:
    bufAppendC('(');

    bufAppendS("RegraTipoIdent");

    bufAppendC(' ');

    shIdent(p->u.regratipoident_.ident_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraTipo!\n");
    exit(1);
  }
}

void shTipoPrimitivo(TipoPrimitivo p)
{
  switch(p->kind)
  {
  case is_TipoPrimitivo_int:

    bufAppendS("TipoPrimitivo_int");




    break;
  case is_TipoPrimitivo_real:

    bufAppendS("TipoPrimitivo_real");




    break;
  case is_TipoPrimitivo_char:

    bufAppendS("TipoPrimitivo_char");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing TipoPrimitivo!\n");
    exit(1);
  }
}

void shValor(Valor p)
{
  switch(p->kind)
  {
  case is_ValorInteger:
    bufAppendC('(');

    bufAppendS("ValorInteger");

    bufAppendC(' ');

    shInteger(p->u.valorinteger_.integer_);

    bufAppendC(')');

    break;
  case is_ValorDouble:
    bufAppendC('(');

    bufAppendS("ValorDouble");

    bufAppendC(' ');

    shDouble(p->u.valordouble_.double_);

    bufAppendC(')');

    break;
  case is_ValorChar:
    bufAppendC('(');

    bufAppendS("ValorChar");

    bufAppendC(' ');

    shChar(p->u.valorchar_.char_);

    bufAppendC(')');

    break;
  case is_ValorString:
    bufAppendC('(');

    bufAppendS("ValorString");

    bufAppendC(' ');

    shString(p->u.valorstring_.string_);

    bufAppendC(')');

    break;
  case is_ValorExpressaoAritmetica:
    bufAppendC('(');

    bufAppendS("ValorExpressaoAritmetica");

    bufAppendC(' ');

    shExpressaoAritmetica(p->u.valorexpressaoaritmetica_.expressaoaritmetica_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Valor!\n");
    exit(1);
  }
}

void shTipoDerivado(TipoDerivado p)
{
  switch(p->kind)
  {
  case is_TipoDerivadoPonteiro:
    bufAppendC('(');

    bufAppendS("TipoDerivadoPonteiro");

    bufAppendC(' ');

    shPonteiro(p->u.tipoderivadoponteiro_.ponteiro_);

    bufAppendC(')');

    break;
  case is_TipoDerivadoVetor:
    bufAppendC('(');

    bufAppendS("TipoDerivadoVetor");

    bufAppendC(' ');

    shVetor(p->u.tipoderivadovetor_.vetor_);

    bufAppendC(')');

    break;
  case is_TipoDerivadoStruct:
    bufAppendC('(');

    bufAppendS("TipoDerivadoStruct");

    bufAppendC(' ');

    shStruct(p->u.tipoderivadostruct_.struct_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing TipoDerivado!\n");
    exit(1);
  }
}

void shPonteiro(Ponteiro p)
{
  switch(p->kind)
  {
  case is_Ponteiro1:
    bufAppendC('(');

    bufAppendS("Ponteiro1");

    bufAppendC(' ');

    shTipoPrimitivo(p->u.ponteiro1_.tipoprimitivo_);

    bufAppendC(')');

    break;
  case is_Ponteiro2:
    bufAppendC('(');

    bufAppendS("Ponteiro2");

    bufAppendC(' ');

    shTipoDerivado(p->u.ponteiro2_.tipoderivado_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Ponteiro!\n");
    exit(1);
  }
}

void shVetor(Vetor p)
{
  switch(p->kind)
  {
  case is_L7:
    bufAppendC('(');

    bufAppendS("L7");

    bufAppendC(' ');

    shInteger(p->u.l7_.integer_1);
  bufAppendC(' ');
    shInteger(p->u.l7_.integer_2);
  bufAppendC(' ');
    shTipoPrimitivo(p->u.l7_.tipoprimitivo_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Vetor!\n");
    exit(1);
  }
}

void shIf(If p)
{
  switch(p->kind)
  {
  case is_If1:
    bufAppendC('(');

    bufAppendS("If1");

    bufAppendC(' ');

    shExpressaoLogica(p->u.if1_.expressaologica_);
  bufAppendC(' ');
    shBlocoComando(p->u.if1_.blococomando_);

    bufAppendC(')');

    break;
  case is_If2:
    bufAppendC('(');

    bufAppendS("If2");

    bufAppendC(' ');

    shExpressaoLogica(p->u.if2_.expressaologica_);
  bufAppendC(' ');
    shBlocoComando(p->u.if2_.blococomando_1);
  bufAppendC(' ');
    shBlocoComando(p->u.if2_.blococomando_2);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing If!\n");
    exit(1);
  }
}

void shWhile(While p)
{
  switch(p->kind)
  {
  case is_L8:
    bufAppendC('(');

    bufAppendS("L8");

    bufAppendC(' ');

    shExpressaoLogica(p->u.l8_.expressaologica_);
  bufAppendC(' ');
    shBlocoComando(p->u.l8_.blococomando_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing While!\n");
    exit(1);
  }
}

void shFor(For p)
{
  switch(p->kind)
  {
  case is_For1:
    bufAppendC('(');

    bufAppendS("For1");

    bufAppendC(' ');

    shAtribuicao(p->u.for1_.atribuicao_);
  bufAppendC(' ');
    shInteger(p->u.for1_.integer_);
  bufAppendC(' ');
    shBlocoComando(p->u.for1_.blococomando_);

    bufAppendC(')');

    break;
  case is_For2:
    bufAppendC('(');

    bufAppendS("For2");

    bufAppendC(' ');

    shAtribuicao(p->u.for2_.atribuicao_);
  bufAppendC(' ');
    shIdent(p->u.for2_.ident_);
  bufAppendC(' ');
    shBlocoComando(p->u.for2_.blococomando_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing For!\n");
    exit(1);
  }
}

void shGoto(Goto p)
{
  switch(p->kind)
  {
  case is_L9:
    bufAppendC('(');

    bufAppendS("L9");

    bufAppendC(' ');

    shIdent(p->u.l9_.ident_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Goto!\n");
    exit(1);
  }
}

void shRotulo(Rotulo p)
{
  switch(p->kind)
  {
  case is_L10:
    bufAppendC('(');

    bufAppendS("L10");

    bufAppendC(' ');

    shIdent(p->u.l10_.ident_);
  bufAppendC(' ');
    shRegraComando(p->u.l10_.regracomando_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Rotulo!\n");
    exit(1);
  }
}

void shStruct(Struct p)
{
  switch(p->kind)
  {
  case is_L11:
    bufAppendC('(');

    bufAppendS("L11");

    bufAppendC(' ');

    shDefinicaoCampoStruct(p->u.l11_.definicaocampostruct_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Struct!\n");
    exit(1);
  }
}

void shDefinicaoCampoStruct(DefinicaoCampoStruct p)
{
  switch(p->kind)
  {
  case is_DefinicaoCampoStruct1:
    bufAppendC('(');

    bufAppendS("DefinicaoCampoStruct1");

    bufAppendC(' ');

    shIdent(p->u.definicaocampostruct1_.ident_);
  bufAppendC(' ');
    shRegraTipo(p->u.definicaocampostruct1_.regratipo_);

    bufAppendC(')');

    break;
  case is_DefinicaoCampoStruct2:
    bufAppendC('(');

    bufAppendS("DefinicaoCampoStruct2");

    bufAppendC(' ');

    shIdent(p->u.definicaocampostruct2_.ident_);
  bufAppendC(' ');
    shRegraTipo(p->u.definicaocampostruct2_.regratipo_);
  bufAppendC(' ');
    shDefinicaoCampoStruct(p->u.definicaocampostruct2_.definicaocampostruct_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing DefinicaoCampoStruct!\n");
    exit(1);
  }
}

void shAtribuicaoStruct(AtribuicaoStruct p)
{
  switch(p->kind)
  {
  case is_AtribuicaoStruct1:
    bufAppendC('(');

    bufAppendS("AtribuicaoStruct1");

    bufAppendC(' ');

    shIdent(p->u.atribuicaostruct1_.ident_1);
  bufAppendC(' ');
    shIdent(p->u.atribuicaostruct1_.ident_2);
  bufAppendC(' ');
    shValor(p->u.atribuicaostruct1_.valor_);

    bufAppendC(')');

    break;
  case is_AtribuicaoStruct2:
    bufAppendC('(');

    bufAppendS("AtribuicaoStruct2");

    bufAppendC(' ');

    shIdent(p->u.atribuicaostruct2_.ident_1);
  bufAppendC(' ');
    shIdent(p->u.atribuicaostruct2_.ident_2);
  bufAppendC(' ');
    shValor(p->u.atribuicaostruct2_.valor_);
  bufAppendC(' ');
    shAtribuicaoStruct(p->u.atribuicaostruct2_.atribuicaostruct_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing AtribuicaoStruct!\n");
    exit(1);
  }
}

void shOperadorRelacional(OperadorRelacional p)
{
  switch(p->kind)
  {
  case is_OperadorRelacional1:

    bufAppendS("OperadorRelacional1");




    break;
  case is_OperadorRelacional2:

    bufAppendS("OperadorRelacional2");




    break;
  case is_OperadorRelacional3:

    bufAppendS("OperadorRelacional3");




    break;
  case is_OperadorRelacional4:

    bufAppendS("OperadorRelacional4");




    break;
  case is_OperadorRelacional5:

    bufAppendS("OperadorRelacional5");




    break;
  case is_OperadorRelacional6:

    bufAppendS("OperadorRelacional6");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing OperadorRelacional!\n");
    exit(1);
  }
}

void shOperadorLogico(OperadorLogico p)
{
  switch(p->kind)
  {
  case is_OperadorLogico1:

    bufAppendS("OperadorLogico1");




    break;
  case is_OperadorLogico2:

    bufAppendS("OperadorLogico2");




    break;
  case is_OperadorLogico3:

    bufAppendS("OperadorLogico3");




    break;
  case is_OperadorLogico4:

    bufAppendS("OperadorLogico4");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing OperadorLogico!\n");
    exit(1);
  }
}

void shOperadorAritmetico(OperadorAritmetico p)
{
  switch(p->kind)
  {
  case is_OperadorAritmetico1:

    bufAppendS("OperadorAritmetico1");




    break;
  case is_OperadorAritmetico2:

    bufAppendS("OperadorAritmetico2");




    break;
  case is_OperadorAritmetico3:

    bufAppendS("OperadorAritmetico3");




    break;
  case is_OperadorAritmetico4:

    bufAppendS("OperadorAritmetico4");




    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing OperadorAritmetico!\n");
    exit(1);
  }
}

void shCase(Case p)
{
  switch(p->kind)
  {
  case is_L12:
    bufAppendC('(');

    bufAppendS("L12");

    bufAppendC(' ');

    shSeletor(p->u.l12_.seletor_);
  bufAppendC(' ');
    shRegraSeletor(p->u.l12_.regraseletor_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Case!\n");
    exit(1);
  }
}

void shRegraSeletor(RegraSeletor p)
{
  switch(p->kind)
  {
  case is_RegraSeletor1:
    bufAppendC('(');

    bufAppendS("RegraSeletor1");

    bufAppendC(' ');

    shSeletor(p->u.regraseletor1_.seletor_);
  bufAppendC(' ');
    shComando(p->u.regraseletor1_.comando_);

    bufAppendC(')');

    break;
  case is_RegraSeletor2:
    bufAppendC('(');

    bufAppendS("RegraSeletor2");

    bufAppendC(' ');

    shSeletor(p->u.regraseletor2_.seletor_);
  bufAppendC(' ');
    shComando(p->u.regraseletor2_.comando_);
  bufAppendC(' ');
    shRegraSeletor(p->u.regraseletor2_.regraseletor_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraSeletor!\n");
    exit(1);
  }
}

void shSeletor(Seletor p)
{
  switch(p->kind)
  {
  case is_SeletorInteger:
    bufAppendC('(');

    bufAppendS("SeletorInteger");

    bufAppendC(' ');

    shInteger(p->u.seletorinteger_.integer_);

    bufAppendC(')');

    break;
  case is_SeletorChar:
    bufAppendC('(');

    bufAppendS("SeletorChar");

    bufAppendC(' ');

    shChar(p->u.seletorchar_.char_);

    bufAppendC(')');

    break;
  case is_SeletorIdent:
    bufAppendC('(');

    bufAppendS("SeletorIdent");

    bufAppendC(' ');

    shIdent(p->u.seletorident_.ident_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Seletor!\n");
    exit(1);
  }
}

void shChamadaFuncaoEProc(ChamadaFuncaoEProc p)
{
  switch(p->kind)
  {
  case is_L33:
    bufAppendC('(');

    bufAppendS("L33");

    bufAppendC(' ');

    shIdent(p->u.l33_.ident_);
  bufAppendC(' ');
    shListaIdent(p->u.l33_.listaident_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing ChamadaFuncaoEProc!\n");
    exit(1);
  }
}

void shListaIdent(ListaIdent p)
{
  switch(p->kind)
  {
  case is_ListaIdentIdent:
    bufAppendC('(');

    bufAppendS("ListaIdentIdent");

    bufAppendC(' ');

    shIdent(p->u.listaidentident_.ident_);

    bufAppendC(')');

    break;
  case is_ListaIdent1:
    bufAppendC('(');

    bufAppendS("ListaIdent1");

    bufAppendC(' ');

    shIdent(p->u.listaident1_.ident_);
  bufAppendC(' ');
    shListaIdent(p->u.listaident1_.listaident_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing ListaIdent!\n");
    exit(1);
  }
}

void shFuncao(Funcao p)
{
  switch(p->kind)
  {
  case is_L13:
    bufAppendC('(');

    bufAppendS("L13");

    bufAppendC(' ');

    shIdent(p->u.l13_.ident_);
  bufAppendC(' ');
    shRegraBlocoVar(p->u.l13_.regrablocovar_);
  bufAppendC(' ');
    shRegraTipo(p->u.l13_.regratipo_);
  bufAppendC(' ');
    shBlocoVar(p->u.l13_.blocovar_);
  bufAppendC(' ');
    shBlocoComando(p->u.l13_.blococomando_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Funcao!\n");
    exit(1);
  }
}

void shProcedimento(Procedimento p)
{
  switch(p->kind)
  {
  case is_Procedimento1:
    bufAppendC('(');

    bufAppendS("Procedimento1");

    bufAppendC(' ');

    shIdent(p->u.procedimento1_.ident_);
  bufAppendC(' ');
    shRegraBlocoVar(p->u.procedimento1_.regrablocovar_);
  bufAppendC(' ');
    shBlocoVar(p->u.procedimento1_.blocovar_);
  bufAppendC(' ');
    shBlocoComando(p->u.procedimento1_.blococomando_);

    bufAppendC(')');

    break;
  case is_Procedimento2:
    bufAppendC('(');

    bufAppendS("Procedimento2");

    bufAppendC(' ');

    shIdent(p->u.procedimento2_.ident_);
  bufAppendC(' ');
    shBlocoVar(p->u.procedimento2_.blocovar_);
  bufAppendC(' ');
    shBlocoComando(p->u.procedimento2_.blococomando_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Procedimento!\n");
    exit(1);
  }
}

void shExpressaoAritmetica(ExpressaoAritmetica p)
{
  switch(p->kind)
  {
  case is_L14:
    bufAppendC('(');

    bufAppendS("L14");

    bufAppendC(' ');

    shOperando(p->u.l14_.operando_);
  bufAppendC(' ');
    shRegraAritmetica(p->u.l14_.regraaritmetica_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing ExpressaoAritmetica!\n");
    exit(1);
  }
}

void shOperando(Operando p)
{
  switch(p->kind)
  {
  case is_OperandoInteger:
    bufAppendC('(');

    bufAppendS("OperandoInteger");

    bufAppendC(' ');

    shInteger(p->u.operandointeger_.integer_);

    bufAppendC(')');

    break;
  case is_OperandoDouble:
    bufAppendC('(');

    bufAppendS("OperandoDouble");

    bufAppendC(' ');

    shDouble(p->u.operandodouble_.double_);

    bufAppendC(')');

    break;
  case is_OperandoIdent:
    bufAppendC('(');

    bufAppendS("OperandoIdent");

    bufAppendC(' ');

    shIdent(p->u.operandoident_.ident_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing Operando!\n");
    exit(1);
  }
}

void shRegraAritmetica(RegraAritmetica p)
{
  switch(p->kind)
  {
  case is_RegraAritmetica1:
    bufAppendC('(');

    bufAppendS("RegraAritmetica1");

    bufAppendC(' ');

    shOperadorAritmetico(p->u.regraaritmetica1_.operadoraritmetico_);
  bufAppendC(' ');
    shOperando(p->u.regraaritmetica1_.operando_);

    bufAppendC(')');

    break;
  case is_RegraAritmetica2:
    bufAppendC('(');

    bufAppendS("RegraAritmetica2");

    bufAppendC(' ');

    shOperadorAritmetico(p->u.regraaritmetica2_.operadoraritmetico_);
  bufAppendC(' ');
    shOperando(p->u.regraaritmetica2_.operando_);
  bufAppendC(' ');
    shRegraAritmetica(p->u.regraaritmetica2_.regraaritmetica_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraAritmetica!\n");
    exit(1);
  }
}

void shExpressaoRelacional(ExpressaoRelacional p)
{
  switch(p->kind)
  {
  case is_ExpressaoRelacional1:
    bufAppendC('(');

    bufAppendS("ExpressaoRelacional1");

    bufAppendC(' ');

    shOperando(p->u.expressaorelacional1_.operando_);
  bufAppendC(' ');
    shRegraRelacional(p->u.expressaorelacional1_.regrarelacional_);

    bufAppendC(')');

    break;
  case is_ExpressaoRelacional2:
    bufAppendC('(');

    bufAppendS("ExpressaoRelacional2");

    bufAppendC(' ');

    shExpressaoAritmetica(p->u.expressaorelacional2_.expressaoaritmetica_);
  bufAppendC(' ');
    shRegraRelacional(p->u.expressaorelacional2_.regrarelacional_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing ExpressaoRelacional!\n");
    exit(1);
  }
}

void shRegraRelacional(RegraRelacional p)
{
  switch(p->kind)
  {
  case is_RegraRelacional1:
    bufAppendC('(');

    bufAppendS("RegraRelacional1");

    bufAppendC(' ');

    shOperadorRelacional(p->u.regrarelacional1_.operadorrelacional_);
  bufAppendC(' ');
    shOperando(p->u.regrarelacional1_.operando_);

    bufAppendC(')');

    break;
  case is_RegraRelacional2:
    bufAppendC('(');

    bufAppendS("RegraRelacional2");

    bufAppendC(' ');

    shOperadorRelacional(p->u.regrarelacional2_.operadorrelacional_);
  bufAppendC(' ');
    shExpressaoAritmetica(p->u.regrarelacional2_.expressaoaritmetica_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraRelacional!\n");
    exit(1);
  }
}

void shExpressaoLogica(ExpressaoLogica p)
{
  switch(p->kind)
  {
  case is_ExpressaoLogica_falso:

    bufAppendS("ExpressaoLogica_falso");




    break;
  case is_ExpressaoLogica_verdadeiro:

    bufAppendS("ExpressaoLogica_verdadeiro");




    break;
  case is_ExpressaoLogicaExpressaoRelacional:
    bufAppendC('(');

    bufAppendS("ExpressaoLogicaExpressaoRelacional");

    bufAppendC(' ');

    shExpressaoRelacional(p->u.expressaologicaexpressaorelacional_.expressaorelacional_);

    bufAppendC(')');

    break;
  case is_ExpressaoLogica1:
    bufAppendC('(');

    bufAppendS("ExpressaoLogica1");

    bufAppendC(' ');

    shRegraLogico(p->u.expressaologica1_.regralogico_);

    bufAppendC(')');

    break;
  case is_ExpressaoLogica2:
    bufAppendC('(');

    bufAppendS("ExpressaoLogica2");

    bufAppendC(' ');

    shRegraLogico(p->u.expressaologica2_.regralogico_);

    bufAppendC(')');

    break;
  case is_ExpressaoLogica3:
    bufAppendC('(');

    bufAppendS("ExpressaoLogica3");

    bufAppendC(' ');

    shExpressaoRelacional(p->u.expressaologica3_.expressaorelacional_);
  bufAppendC(' ');
    shRegraLogico(p->u.expressaologica3_.regralogico_);

    bufAppendC(')');

    break;
  case is_ExpressaoLogica4:
    bufAppendC('(');

    bufAppendS("ExpressaoLogica4");

    bufAppendC(' ');

    shOperadorLogico(p->u.expressaologica4_.operadorlogico_);
  bufAppendC(' ');
    shExpressaoLogica(p->u.expressaologica4_.expressaologica_);

    bufAppendC(')');

    break;
  case is_ExpressaoLogica5:
    bufAppendC('(');

    bufAppendS("ExpressaoLogica5");

    bufAppendC(' ');

    shOperadorLogico(p->u.expressaologica5_.operadorlogico_);
  bufAppendC(' ');
    shExpressaoLogica(p->u.expressaologica5_.expressaologica_);
  bufAppendC(' ');
    shRegraLogico(p->u.expressaologica5_.regralogico_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing ExpressaoLogica!\n");
    exit(1);
  }
}

void shRegraLogico(RegraLogico p)
{
  switch(p->kind)
  {
  case is_RegraLogico1:
    bufAppendC('(');

    bufAppendS("RegraLogico1");

    bufAppendC(' ');

    shOperadorLogico(p->u.regralogico1_.operadorlogico_);
  bufAppendC(' ');
    shExpressaoLogica(p->u.regralogico1_.expressaologica_);

    bufAppendC(')');

    break;
  case is_RegraLogico2:
    bufAppendC('(');

    bufAppendS("RegraLogico2");

    bufAppendC(' ');

    shOperadorLogico(p->u.regralogico2_.operadorlogico_);
  bufAppendC(' ');
    shExpressaoLogica(p->u.regralogico2_.expressaologica_);
  bufAppendC(' ');
    shRegraLogico(p->u.regralogico2_.regralogico_);

    bufAppendC(')');

    break;

  default:
    fprintf(stderr, "Error: bad kind field when showing RegraLogico!\n");
    exit(1);
  }
}

void shInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  bufAppendS(tmp);
}
void shDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  bufAppendS(tmp);
}
void shChar(Char c)
{
  bufAppendC('\'');
  bufAppendC(c);
  bufAppendC('\'');
}
void shString(String s)
{
  bufAppendC('\"');
  bufAppendS(s);
  bufAppendC('\"');
}
void shIdent(String s)
{
  bufAppendC('\"');
  bufAppendS(s);
  bufAppendC('\"');
}

void bufAppendS(const char *s)
{
  size_t len = strlen(s);
  size_t n;
  while (cur_ + len >= buf_size)
  {
    buf_size *= 2; /* Double the buffer size */
    resizeBuffer();
  }
  for(n = 0; n < len; n++)
  {
    buf_[cur_ + n] = s[n];
  }
  cur_ += len;
  buf_[cur_] = 0;
}
void bufAppendC(const char c)
{
  if (cur_ + 1 >= buf_size)
  {
    buf_size *= 2; /* Double the buffer size */
    resizeBuffer();
  }
  buf_[cur_] = c;
  cur_++;
  buf_[cur_] = 0;
}
void bufReset(void)
{
  cur_ = 0;
  buf_size = BUFFER_INITIAL;
  resizeBuffer();
  memset(buf_, 0, buf_size);
}
void resizeBuffer(void)
{
  char *temp = (char *) malloc(buf_size);
  if (!temp)
  {
    fprintf(stderr, "Error: Out of memory while attempting to grow buffer!\n");
    exit(1);
  }
  if (buf_)
  {
    strncpy(temp, buf_, buf_size); /* peteg: strlcpy is safer, but not POSIX/ISO C. */
    free(buf_);
  }
  buf_ = temp;
}
char *buf_;
size_t cur_, buf_size;

