/* File generated by the BNF Converter (bnfc 2.9.4). */

/*** Visitor Traversal Skeleton. ***/
/* This traverses the abstract syntax tree.
   To use, copy Skeleton.h and Skeleton.c to
   new files. */

#include <stdlib.h>
#include <stdio.h>

#include "Skeleton.h"

void visitEntry(Entry p)
{
  switch(p->kind)
  {
  case is_L1:
    /* Code for L1 Goes Here */
    visitIdent(p->u.l1_.ident_);
    visitBlocoDefinicoes(p->u.l1_.blocodefinicoes_);
    visitBlocoComando(p->u.l1_.blococomando_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Entry!\n");
    exit(1);
  }
}

void visitBlocoDefinicoes(BlocoDefinicoes p)
{
  switch(p->kind)
  {
  case is_BlocoDefinicoes1:
    /* Code for BlocoDefinicoes1 Goes Here */
    visitBlocoFuncaoEProc(p->u.blocodefinicoes1_.blocofuncaoeproc_);
    visitBlocoDefinicoes(p->u.blocodefinicoes1_.blocodefinicoes_);
    break;
  case is_BlocoDefinicoes2:
    /* Code for BlocoDefinicoes2 Goes Here */
    visitBlocoConstante(p->u.blocodefinicoes2_.blococonstante_);
    visitBlocoDefinicoes(p->u.blocodefinicoes2_.blocodefinicoes_);
    break;
  case is_BlocoDefinicoes3:
    /* Code for BlocoDefinicoes3 Goes Here */
    visitBlocoTipo(p->u.blocodefinicoes3_.blocotipo_);
    visitBlocoDefinicoes(p->u.blocodefinicoes3_.blocodefinicoes_);
    break;
  case is_BlocoDefinicoes4:
    /* Code for BlocoDefinicoes4 Goes Here */
    visitBlocoVar(p->u.blocodefinicoes4_.blocovar_);
    visitBlocoDefinicoes(p->u.blocodefinicoes4_.blocodefinicoes_);
    break;
  case is_BlocoDefinicoes_:
    /* Code for BlocoDefinicoes_ Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoDefinicoes!\n");
    exit(1);
  }
}

void visitBlocoFuncaoEProc(BlocoFuncaoEProc p)
{
  switch(p->kind)
  {
  case is_BlocoFuncaoEProcFuncao:
    /* Code for BlocoFuncaoEProcFuncao Goes Here */
    visitFuncao(p->u.blocofuncaoeprocfuncao_.funcao_);
    break;
  case is_BlocoFuncaoEProc1:
    /* Code for BlocoFuncaoEProc1 Goes Here */
    visitFuncao(p->u.blocofuncaoeproc1_.funcao_);
    visitBlocoFuncaoEProc(p->u.blocofuncaoeproc1_.blocofuncaoeproc_);
    break;
  case is_BlocoFuncaoEProcProcedimento:
    /* Code for BlocoFuncaoEProcProcedimento Goes Here */
    visitProcedimento(p->u.blocofuncaoeprocprocedimento_.procedimento_);
    break;
  case is_BlocoFuncaoEProc2:
    /* Code for BlocoFuncaoEProc2 Goes Here */
    visitProcedimento(p->u.blocofuncaoeproc2_.procedimento_);
    visitBlocoFuncaoEProc(p->u.blocofuncaoeproc2_.blocofuncaoeproc_);
    break;
  case is_BlocoFuncaoEProc_:
    /* Code for BlocoFuncaoEProc_ Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoFuncaoEProc!\n");
    exit(1);
  }
}

void visitBlocoConstante(BlocoConstante p)
{
  switch(p->kind)
  {
  case is_BlocoConstante1:
    /* Code for BlocoConstante1 Goes Here */
    visitRegraBlocoConstante(p->u.blococonstante1_.regrablococonstante_);
    break;
  case is_BlocoConstante_:
    /* Code for BlocoConstante_ Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoConstante!\n");
    exit(1);
  }
}

void visitRegraBlocoConstante(RegraBlocoConstante p)
{
  switch(p->kind)
  {
  case is_RegraBlocoConstante1:
    /* Code for RegraBlocoConstante1 Goes Here */
    visitIdent(p->u.regrablococonstante1_.ident_);
    visitValor(p->u.regrablococonstante1_.valor_);
    break;
  case is_RegraBlocoConstante2:
    /* Code for RegraBlocoConstante2 Goes Here */
    visitIdent(p->u.regrablococonstante2_.ident_);
    visitValor(p->u.regrablococonstante2_.valor_);
    visitRegraBlocoConstante(p->u.regrablococonstante2_.regrablococonstante_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraBlocoConstante!\n");
    exit(1);
  }
}

void visitBlocoTipo(BlocoTipo p)
{
  switch(p->kind)
  {
  case is_BlocoTipo1:
    /* Code for BlocoTipo1 Goes Here */
    visitRegraBlocoTipo(p->u.blocotipo1_.regrablocotipo_);
    break;
  case is_BlocoTipo_:
    /* Code for BlocoTipo_ Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoTipo!\n");
    exit(1);
  }
}

void visitRegraBlocoTipo(RegraBlocoTipo p)
{
  switch(p->kind)
  {
  case is_RegraBlocoTipo1:
    /* Code for RegraBlocoTipo1 Goes Here */
    visitIdent(p->u.regrablocotipo1_.ident_);
    visitRegraTipo(p->u.regrablocotipo1_.regratipo_);
    break;
  case is_RegraBlocoTipo2:
    /* Code for RegraBlocoTipo2 Goes Here */
    visitIdent(p->u.regrablocotipo2_.ident_);
    visitRegraTipo(p->u.regrablocotipo2_.regratipo_);
    visitRegraBlocoTipo(p->u.regrablocotipo2_.regrablocotipo_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraBlocoTipo!\n");
    exit(1);
  }
}

void visitBlocoVar(BlocoVar p)
{
  switch(p->kind)
  {
  case is_BlocoVar1:
    /* Code for BlocoVar1 Goes Here */
    visitRegraBlocoVar(p->u.blocovar1_.regrablocovar_);
    break;
  case is_BlocoVar_:
    /* Code for BlocoVar_ Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoVar!\n");
    exit(1);
  }
}

void visitRegraBlocoVar(RegraBlocoVar p)
{
  switch(p->kind)
  {
  case is_RegraBlocoVar1:
    /* Code for RegraBlocoVar1 Goes Here */
    visitIdent(p->u.regrablocovar1_.ident_);
    visitRegraTipo(p->u.regrablocovar1_.regratipo_);
    break;
  case is_RegraBlocoVar2:
    /* Code for RegraBlocoVar2 Goes Here */
    visitIdent(p->u.regrablocovar2_.ident_);
    visitRegraTipo(p->u.regrablocovar2_.regratipo_);
    visitRegraBlocoVar(p->u.regrablocovar2_.regrablocovar_);
    break;
  case is_RegraBlocoVar3:
    /* Code for RegraBlocoVar3 Goes Here */
    visitListaIdent(p->u.regrablocovar3_.listaident_);
    visitRegraTipo(p->u.regrablocovar3_.regratipo_);
    break;
  case is_RegraBlocoVar4:
    /* Code for RegraBlocoVar4 Goes Here */
    visitListaIdent(p->u.regrablocovar4_.listaident_);
    visitRegraTipo(p->u.regrablocovar4_.regratipo_);
    visitRegraBlocoVar(p->u.regrablocovar4_.regrablocovar_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraBlocoVar!\n");
    exit(1);
  }
}

void visitBlocoComando(BlocoComando p)
{
  switch(p->kind)
  {
  case is_BlocoComando1:
    /* Code for BlocoComando1 Goes Here */
    visitRegraComando(p->u.blococomando1_.regracomando_);
    break;
  case is_BlocoComando_:
    /* Code for BlocoComando_ Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing BlocoComando!\n");
    exit(1);
  }
}

void visitRegraComando(RegraComando p)
{
  switch(p->kind)
  {
  case is_RegraComando1:
    /* Code for RegraComando1 Goes Here */
    visitComando(p->u.regracomando1_.comando_);
    break;
  case is_RegraComando2:
    /* Code for RegraComando2 Goes Here */
    visitComando(p->u.regracomando2_.comando_);
    visitRegraComando(p->u.regracomando2_.regracomando_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraComando!\n");
    exit(1);
  }
}

void visitComando(Comando p)
{
  switch(p->kind)
  {
  case is_ComandoAtribuicao:
    /* Code for ComandoAtribuicao Goes Here */
    visitAtribuicao(p->u.comandoatribuicao_.atribuicao_);
    break;
  case is_ComandoIf:
    /* Code for ComandoIf Goes Here */
    visitIf(p->u.comandoif_.if_);
    break;
  case is_ComandoWhile:
    /* Code for ComandoWhile Goes Here */
    visitWhile(p->u.comandowhile_.while_);
    break;
  case is_ComandoFor:
    /* Code for ComandoFor Goes Here */
    visitFor(p->u.comandofor_.for_);
    break;
  case is_ComandoGoto:
    /* Code for ComandoGoto Goes Here */
    visitGoto(p->u.comandogoto_.goto_);
    break;
  case is_ComandoCase:
    /* Code for ComandoCase Goes Here */
    visitCase(p->u.comandocase_.case_);
    break;
  case is_ComandoChamadaFuncaoEProc:
    /* Code for ComandoChamadaFuncaoEProc Goes Here */
    visitChamadaFuncaoEProc(p->u.comandochamadafuncaoeproc_.chamadafuncaoeproc_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Comando!\n");
    exit(1);
  }
}

void visitAtribuicao(Atribuicao p)
{
  switch(p->kind)
  {
  case is_Atribuicao1:
    /* Code for Atribuicao1 Goes Here */
    visitIdent(p->u.atribuicao1_.ident_);
    visitValor(p->u.atribuicao1_.valor_);
    break;
  case is_Atribuicao2:
    /* Code for Atribuicao2 Goes Here */
    visitIdent(p->u.atribuicao2_.ident_1);
    visitIdent(p->u.atribuicao2_.ident_2);
    break;
  case is_Atribuicao3:
    /* Code for Atribuicao3 Goes Here */
    visitIdent(p->u.atribuicao3_.ident_);
    visitSubEscrito(p->u.atribuicao3_.subescrito_);
    visitValor(p->u.atribuicao3_.valor_);
    break;
  case is_Atribuicao4:
    /* Code for Atribuicao4 Goes Here */
    visitIdent(p->u.atribuicao4_.ident_);
    visitValor(p->u.atribuicao4_.valor_);
    break;
  case is_AtribuicaoAtribuicaoStruct:
    /* Code for AtribuicaoAtribuicaoStruct Goes Here */
    visitAtribuicaoStruct(p->u.atribuicaoatribuicaostruct_.atribuicaostruct_);
    break;
  case is_Atribuicao5:
    /* Code for Atribuicao5 Goes Here */
    visitIdent(p->u.atribuicao5_.ident_);
    visitChamadaFuncaoEProc(p->u.atribuicao5_.chamadafuncaoeproc_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Atribuicao!\n");
    exit(1);
  }
}

void visitSubEscrito(SubEscrito p)
{
  switch(p->kind)
  {
  case is_SubEscritoIdent:
    /* Code for SubEscritoIdent Goes Here */
    visitIdent(p->u.subescritoident_.ident_);
    break;
  case is_SubEscritoInteger:
    /* Code for SubEscritoInteger Goes Here */
    visitInteger(p->u.subescritointeger_.integer_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing SubEscrito!\n");
    exit(1);
  }
}

void visitRegraTipo(RegraTipo p)
{
  switch(p->kind)
  {
  case is_RegraTipoTipoPrimitivo:
    /* Code for RegraTipoTipoPrimitivo Goes Here */
    visitTipoPrimitivo(p->u.regratipotipoprimitivo_.tipoprimitivo_);
    break;
  case is_RegraTipoTipoDerivado:
    /* Code for RegraTipoTipoDerivado Goes Here */
    visitTipoDerivado(p->u.regratipotipoderivado_.tipoderivado_);
    break;
  case is_RegraTipoIdent:
    /* Code for RegraTipoIdent Goes Here */
    visitIdent(p->u.regratipoident_.ident_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraTipo!\n");
    exit(1);
  }
}

void visitTipoPrimitivo(TipoPrimitivo p)
{
  switch(p->kind)
  {
  case is_TipoPrimitivo_int:
    /* Code for TipoPrimitivo_int Goes Here */
    break;
  case is_TipoPrimitivo_real:
    /* Code for TipoPrimitivo_real Goes Here */
    break;
  case is_TipoPrimitivo_char:
    /* Code for TipoPrimitivo_char Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing TipoPrimitivo!\n");
    exit(1);
  }
}

void visitValor(Valor p)
{
  switch(p->kind)
  {
  case is_ValorInteger:
    /* Code for ValorInteger Goes Here */
    visitInteger(p->u.valorinteger_.integer_);
    break;
  case is_ValorDouble:
    /* Code for ValorDouble Goes Here */
    visitDouble(p->u.valordouble_.double_);
    break;
  case is_ValorChar:
    /* Code for ValorChar Goes Here */
    visitChar(p->u.valorchar_.char_);
    break;
  case is_ValorString:
    /* Code for ValorString Goes Here */
    visitString(p->u.valorstring_.string_);
    break;
  case is_ValorExpressaoAritmetica:
    /* Code for ValorExpressaoAritmetica Goes Here */
    visitExpressaoAritmetica(p->u.valorexpressaoaritmetica_.expressaoaritmetica_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Valor!\n");
    exit(1);
  }
}

void visitTipoDerivado(TipoDerivado p)
{
  switch(p->kind)
  {
  case is_TipoDerivadoPonteiro:
    /* Code for TipoDerivadoPonteiro Goes Here */
    visitPonteiro(p->u.tipoderivadoponteiro_.ponteiro_);
    break;
  case is_TipoDerivadoVetor:
    /* Code for TipoDerivadoVetor Goes Here */
    visitVetor(p->u.tipoderivadovetor_.vetor_);
    break;
  case is_TipoDerivadoStruct:
    /* Code for TipoDerivadoStruct Goes Here */
    visitStruct(p->u.tipoderivadostruct_.struct_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing TipoDerivado!\n");
    exit(1);
  }
}

void visitPonteiro(Ponteiro p)
{
  switch(p->kind)
  {
  case is_Ponteiro1:
    /* Code for Ponteiro1 Goes Here */
    visitTipoPrimitivo(p->u.ponteiro1_.tipoprimitivo_);
    break;
  case is_Ponteiro2:
    /* Code for Ponteiro2 Goes Here */
    visitTipoDerivado(p->u.ponteiro2_.tipoderivado_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Ponteiro!\n");
    exit(1);
  }
}

void visitVetor(Vetor p)
{
  switch(p->kind)
  {
  case is_L7:
    /* Code for L7 Goes Here */
    visitInteger(p->u.l7_.integer_1);
    visitInteger(p->u.l7_.integer_2);
    visitTipoPrimitivo(p->u.l7_.tipoprimitivo_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Vetor!\n");
    exit(1);
  }
}

void visitIf(If p)
{
  switch(p->kind)
  {
  case is_If1:
    /* Code for If1 Goes Here */
    visitExpressaoLogica(p->u.if1_.expressaologica_);
    visitBlocoComando(p->u.if1_.blococomando_);
    break;
  case is_If2:
    /* Code for If2 Goes Here */
    visitExpressaoLogica(p->u.if2_.expressaologica_);
    visitBlocoComando(p->u.if2_.blococomando_1);
    visitBlocoComando(p->u.if2_.blococomando_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing If!\n");
    exit(1);
  }
}

void visitWhile(While p)
{
  switch(p->kind)
  {
  case is_L8:
    /* Code for L8 Goes Here */
    visitExpressaoLogica(p->u.l8_.expressaologica_);
    visitBlocoComando(p->u.l8_.blococomando_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing While!\n");
    exit(1);
  }
}

void visitFor(For p)
{
  switch(p->kind)
  {
  case is_For1:
    /* Code for For1 Goes Here */
    visitAtribuicao(p->u.for1_.atribuicao_);
    visitInteger(p->u.for1_.integer_);
    visitBlocoComando(p->u.for1_.blococomando_);
    break;
  case is_For2:
    /* Code for For2 Goes Here */
    visitAtribuicao(p->u.for2_.atribuicao_);
    visitIdent(p->u.for2_.ident_);
    visitBlocoComando(p->u.for2_.blococomando_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing For!\n");
    exit(1);
  }
}

void visitGoto(Goto p)
{
  switch(p->kind)
  {
  case is_L9:
    /* Code for L9 Goes Here */
    visitIdent(p->u.l9_.ident_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Goto!\n");
    exit(1);
  }
}

void visitRotulo(Rotulo p)
{
  switch(p->kind)
  {
  case is_L10:
    /* Code for L10 Goes Here */
    visitIdent(p->u.l10_.ident_);
    visitRegraComando(p->u.l10_.regracomando_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Rotulo!\n");
    exit(1);
  }
}

void visitStruct(Struct p)
{
  switch(p->kind)
  {
  case is_L11:
    /* Code for L11 Goes Here */
    visitDefinicaoCampoStruct(p->u.l11_.definicaocampostruct_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Struct!\n");
    exit(1);
  }
}

void visitDefinicaoCampoStruct(DefinicaoCampoStruct p)
{
  switch(p->kind)
  {
  case is_DefinicaoCampoStruct1:
    /* Code for DefinicaoCampoStruct1 Goes Here */
    visitIdent(p->u.definicaocampostruct1_.ident_);
    visitRegraTipo(p->u.definicaocampostruct1_.regratipo_);
    break;
  case is_DefinicaoCampoStruct2:
    /* Code for DefinicaoCampoStruct2 Goes Here */
    visitIdent(p->u.definicaocampostruct2_.ident_);
    visitRegraTipo(p->u.definicaocampostruct2_.regratipo_);
    visitDefinicaoCampoStruct(p->u.definicaocampostruct2_.definicaocampostruct_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing DefinicaoCampoStruct!\n");
    exit(1);
  }
}

void visitAtribuicaoStruct(AtribuicaoStruct p)
{
  switch(p->kind)
  {
  case is_AtribuicaoStruct1:
    /* Code for AtribuicaoStruct1 Goes Here */
    visitIdent(p->u.atribuicaostruct1_.ident_1);
    visitIdent(p->u.atribuicaostruct1_.ident_2);
    visitValor(p->u.atribuicaostruct1_.valor_);
    break;
  case is_AtribuicaoStruct2:
    /* Code for AtribuicaoStruct2 Goes Here */
    visitIdent(p->u.atribuicaostruct2_.ident_1);
    visitIdent(p->u.atribuicaostruct2_.ident_2);
    visitValor(p->u.atribuicaostruct2_.valor_);
    visitAtribuicaoStruct(p->u.atribuicaostruct2_.atribuicaostruct_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing AtribuicaoStruct!\n");
    exit(1);
  }
}

void visitOperadorRelacional(OperadorRelacional p)
{
  switch(p->kind)
  {
  case is_OperadorRelacional1:
    /* Code for OperadorRelacional1 Goes Here */
    break;
  case is_OperadorRelacional2:
    /* Code for OperadorRelacional2 Goes Here */
    break;
  case is_OperadorRelacional3:
    /* Code for OperadorRelacional3 Goes Here */
    break;
  case is_OperadorRelacional4:
    /* Code for OperadorRelacional4 Goes Here */
    break;
  case is_OperadorRelacional5:
    /* Code for OperadorRelacional5 Goes Here */
    break;
  case is_OperadorRelacional6:
    /* Code for OperadorRelacional6 Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing OperadorRelacional!\n");
    exit(1);
  }
}

void visitOperadorLogico(OperadorLogico p)
{
  switch(p->kind)
  {
  case is_OperadorLogico1:
    /* Code for OperadorLogico1 Goes Here */
    break;
  case is_OperadorLogico2:
    /* Code for OperadorLogico2 Goes Here */
    break;
  case is_OperadorLogico3:
    /* Code for OperadorLogico3 Goes Here */
    break;
  case is_OperadorLogico4:
    /* Code for OperadorLogico4 Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing OperadorLogico!\n");
    exit(1);
  }
}

void visitOperadorAritmetico(OperadorAritmetico p)
{
  switch(p->kind)
  {
  case is_OperadorAritmetico1:
    /* Code for OperadorAritmetico1 Goes Here */
    break;
  case is_OperadorAritmetico2:
    /* Code for OperadorAritmetico2 Goes Here */
    break;
  case is_OperadorAritmetico3:
    /* Code for OperadorAritmetico3 Goes Here */
    break;
  case is_OperadorAritmetico4:
    /* Code for OperadorAritmetico4 Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing OperadorAritmetico!\n");
    exit(1);
  }
}

void visitCase(Case p)
{
  switch(p->kind)
  {
  case is_L12:
    /* Code for L12 Goes Here */
    visitSeletor(p->u.l12_.seletor_);
    visitRegraSeletor(p->u.l12_.regraseletor_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Case!\n");
    exit(1);
  }
}

void visitRegraSeletor(RegraSeletor p)
{
  switch(p->kind)
  {
  case is_RegraSeletor1:
    /* Code for RegraSeletor1 Goes Here */
    visitSeletor(p->u.regraseletor1_.seletor_);
    visitComando(p->u.regraseletor1_.comando_);
    break;
  case is_RegraSeletor2:
    /* Code for RegraSeletor2 Goes Here */
    visitSeletor(p->u.regraseletor2_.seletor_);
    visitComando(p->u.regraseletor2_.comando_);
    visitRegraSeletor(p->u.regraseletor2_.regraseletor_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraSeletor!\n");
    exit(1);
  }
}

void visitSeletor(Seletor p)
{
  switch(p->kind)
  {
  case is_SeletorInteger:
    /* Code for SeletorInteger Goes Here */
    visitInteger(p->u.seletorinteger_.integer_);
    break;
  case is_SeletorChar:
    /* Code for SeletorChar Goes Here */
    visitChar(p->u.seletorchar_.char_);
    break;
  case is_SeletorIdent:
    /* Code for SeletorIdent Goes Here */
    visitIdent(p->u.seletorident_.ident_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Seletor!\n");
    exit(1);
  }
}

void visitChamadaFuncaoEProc(ChamadaFuncaoEProc p)
{
  switch(p->kind)
  {
  case is_L33:
    /* Code for L33 Goes Here */
    visitIdent(p->u.l33_.ident_);
    visitListaIdent(p->u.l33_.listaident_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ChamadaFuncaoEProc!\n");
    exit(1);
  }
}

void visitListaIdent(ListaIdent p)
{
  switch(p->kind)
  {
  case is_ListaIdentIdent:
    /* Code for ListaIdentIdent Goes Here */
    visitIdent(p->u.listaidentident_.ident_);
    break;
  case is_ListaIdent1:
    /* Code for ListaIdent1 Goes Here */
    visitIdent(p->u.listaident1_.ident_);
    visitListaIdent(p->u.listaident1_.listaident_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ListaIdent!\n");
    exit(1);
  }
}

void visitFuncao(Funcao p)
{
  switch(p->kind)
  {
  case is_L13:
    /* Code for L13 Goes Here */
    visitIdent(p->u.l13_.ident_);
    visitRegraBlocoVar(p->u.l13_.regrablocovar_);
    visitRegraTipo(p->u.l13_.regratipo_);
    visitBlocoVar(p->u.l13_.blocovar_);
    visitBlocoComando(p->u.l13_.blococomando_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Funcao!\n");
    exit(1);
  }
}

void visitProcedimento(Procedimento p)
{
  switch(p->kind)
  {
  case is_Procedimento1:
    /* Code for Procedimento1 Goes Here */
    visitIdent(p->u.procedimento1_.ident_);
    visitRegraBlocoVar(p->u.procedimento1_.regrablocovar_);
    visitBlocoVar(p->u.procedimento1_.blocovar_);
    visitBlocoComando(p->u.procedimento1_.blococomando_);
    break;
  case is_Procedimento2:
    /* Code for Procedimento2 Goes Here */
    visitIdent(p->u.procedimento2_.ident_);
    visitBlocoVar(p->u.procedimento2_.blocovar_);
    visitBlocoComando(p->u.procedimento2_.blococomando_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Procedimento!\n");
    exit(1);
  }
}

void visitExpressaoAritmetica(ExpressaoAritmetica p)
{
  switch(p->kind)
  {
  case is_L14:
    /* Code for L14 Goes Here */
    visitOperando(p->u.l14_.operando_);
    visitRegraAritmetica(p->u.l14_.regraaritmetica_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ExpressaoAritmetica!\n");
    exit(1);
  }
}

void visitOperando(Operando p)
{
  switch(p->kind)
  {
  case is_OperandoInteger:
    /* Code for OperandoInteger Goes Here */
    visitInteger(p->u.operandointeger_.integer_);
    break;
  case is_OperandoDouble:
    /* Code for OperandoDouble Goes Here */
    visitDouble(p->u.operandodouble_.double_);
    break;
  case is_OperandoIdent:
    /* Code for OperandoIdent Goes Here */
    visitIdent(p->u.operandoident_.ident_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Operando!\n");
    exit(1);
  }
}

void visitRegraAritmetica(RegraAritmetica p)
{
  switch(p->kind)
  {
  case is_RegraAritmetica1:
    /* Code for RegraAritmetica1 Goes Here */
    visitOperadorAritmetico(p->u.regraaritmetica1_.operadoraritmetico_);
    visitOperando(p->u.regraaritmetica1_.operando_);
    break;
  case is_RegraAritmetica2:
    /* Code for RegraAritmetica2 Goes Here */
    visitOperadorAritmetico(p->u.regraaritmetica2_.operadoraritmetico_);
    visitOperando(p->u.regraaritmetica2_.operando_);
    visitRegraAritmetica(p->u.regraaritmetica2_.regraaritmetica_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraAritmetica!\n");
    exit(1);
  }
}

void visitExpressaoRelacional(ExpressaoRelacional p)
{
  switch(p->kind)
  {
  case is_ExpressaoRelacional1:
    /* Code for ExpressaoRelacional1 Goes Here */
    visitOperando(p->u.expressaorelacional1_.operando_);
    visitRegraRelacional(p->u.expressaorelacional1_.regrarelacional_);
    break;
  case is_ExpressaoRelacional2:
    /* Code for ExpressaoRelacional2 Goes Here */
    visitExpressaoAritmetica(p->u.expressaorelacional2_.expressaoaritmetica_);
    visitRegraRelacional(p->u.expressaorelacional2_.regrarelacional_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ExpressaoRelacional!\n");
    exit(1);
  }
}

void visitRegraRelacional(RegraRelacional p)
{
  switch(p->kind)
  {
  case is_RegraRelacional1:
    /* Code for RegraRelacional1 Goes Here */
    visitOperadorRelacional(p->u.regrarelacional1_.operadorrelacional_);
    visitOperando(p->u.regrarelacional1_.operando_);
    break;
  case is_RegraRelacional2:
    /* Code for RegraRelacional2 Goes Here */
    visitOperadorRelacional(p->u.regrarelacional2_.operadorrelacional_);
    visitExpressaoAritmetica(p->u.regrarelacional2_.expressaoaritmetica_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraRelacional!\n");
    exit(1);
  }
}

void visitExpressaoLogica(ExpressaoLogica p)
{
  switch(p->kind)
  {
  case is_ExpressaoLogica_falso:
    /* Code for ExpressaoLogica_falso Goes Here */
    break;
  case is_ExpressaoLogica_verdadeiro:
    /* Code for ExpressaoLogica_verdadeiro Goes Here */
    break;
  case is_ExpressaoLogicaExpressaoRelacional:
    /* Code for ExpressaoLogicaExpressaoRelacional Goes Here */
    visitExpressaoRelacional(p->u.expressaologicaexpressaorelacional_.expressaorelacional_);
    break;
  case is_ExpressaoLogica1:
    /* Code for ExpressaoLogica1 Goes Here */
    visitRegraLogico(p->u.expressaologica1_.regralogico_);
    break;
  case is_ExpressaoLogica2:
    /* Code for ExpressaoLogica2 Goes Here */
    visitRegraLogico(p->u.expressaologica2_.regralogico_);
    break;
  case is_ExpressaoLogica3:
    /* Code for ExpressaoLogica3 Goes Here */
    visitExpressaoRelacional(p->u.expressaologica3_.expressaorelacional_);
    visitRegraLogico(p->u.expressaologica3_.regralogico_);
    break;
  case is_ExpressaoLogica4:
    /* Code for ExpressaoLogica4 Goes Here */
    visitOperadorLogico(p->u.expressaologica4_.operadorlogico_);
    visitExpressaoLogica(p->u.expressaologica4_.expressaologica_);
    break;
  case is_ExpressaoLogica5:
    /* Code for ExpressaoLogica5 Goes Here */
    visitOperadorLogico(p->u.expressaologica5_.operadorlogico_);
    visitExpressaoLogica(p->u.expressaologica5_.expressaologica_);
    visitRegraLogico(p->u.expressaologica5_.regralogico_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing ExpressaoLogica!\n");
    exit(1);
  }
}

void visitRegraLogico(RegraLogico p)
{
  switch(p->kind)
  {
  case is_RegraLogico1:
    /* Code for RegraLogico1 Goes Here */
    visitOperadorLogico(p->u.regralogico1_.operadorlogico_);
    visitExpressaoLogica(p->u.regralogico1_.expressaologica_);
    break;
  case is_RegraLogico2:
    /* Code for RegraLogico2 Goes Here */
    visitOperadorLogico(p->u.regralogico2_.operadorlogico_);
    visitExpressaoLogica(p->u.regralogico2_.expressaologica_);
    visitRegraLogico(p->u.regralogico2_.regralogico_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing RegraLogico!\n");
    exit(1);
  }
}

void visitIdent(Ident i)
{
  /* Code for Ident Goes Here */
}
void visitInteger(Integer i)
{
  /* Code for Integer Goes Here */
}
void visitDouble(Double d)
{
  /* Code for Double Goes Here */
}
void visitChar(Char c)
{
  /* Code for Char Goes Here */
}
void visitString(String s)
{
  /* Code for String Goes Here */
}

