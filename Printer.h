/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.h"

/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2048
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

/* The following are simple heuristics for rendering terminals */
/* You may wish to change them */
void renderCC(Char c);
void renderCS(String s);
void indent(void);
void backup(void);
void onEmptyLine(void);
void removeTrailingSpaces(void);
void removeTrailingWhitespace(void);


char *printEntry(Entry p);
char *printBlocoFuncao(BlocoFuncao p);
char *printBlocoConstante(BlocoConstante p);
char *printRegraBlocoConstante(RegraBlocoConstante p);
char *printBlocoTipo(BlocoTipo p);
char *printRegraBlocoTipo(RegraBlocoTipo p);
char *printBlocoVar(BlocoVar p);
char *printRegraBlocoVar(RegraBlocoVar p);
char *printBlocoComando(BlocoComando p);
char *printRegraComando(RegraComando p);
char *printComando(Comando p);
char *printAtribuicao(Atribuicao p);
char *printSubEscrito(SubEscrito p);
char *printRegraTipo(RegraTipo p);
char *printTipoPrimitivo(TipoPrimitivo p);
char *printValor(Valor p);
char *printTipoDerivado(TipoDerivado p);
char *printPonteiro(Ponteiro p);
char *printVetor(Vetor p);
char *printIf(If p);
char *printWhile(While p);
char *printFor(For p);
char *printGoto(Goto p);
char *printRotulo(Rotulo p);
char *printStruct(Struct p);
char *printDefinicaoCampoStruct(DefinicaoCampoStruct p);
char *printAtribuicaoStruct(AtribuicaoStruct p);
char *printOperadorRelacional(OperadorRelacional p);
char *printOperadorLogico(OperadorLogico p);
char *printOperadorAritmetico(OperadorAritmetico p);
char *printCase(Case p);
char *printRegraSeletor(RegraSeletor p);
char *printSeletor(Seletor p);
char *printChamadaFuncao(ChamadaFuncao p);
char *printListaIdent(ListaIdent p);
char *printFuncao(Funcao p);
char *printProcedimento(Procedimento p);
char *printExpressaoAritmetica(ExpressaoAritmetica p);
char *printOperando(Operando p);
char *printRegraAritmetica(RegraAritmetica p);
char *printExpressaoRelacional(ExpressaoRelacional p);
char *printRegraRelacional(RegraRelacional p);
char *printExpressaoLogica(ExpressaoLogica p);
char *printRegraLogico(RegraLogico p);

void ppEntry(Entry p, int i);
void ppBlocoFuncao(BlocoFuncao p, int i);
void ppBlocoConstante(BlocoConstante p, int i);
void ppRegraBlocoConstante(RegraBlocoConstante p, int i);
void ppBlocoTipo(BlocoTipo p, int i);
void ppRegraBlocoTipo(RegraBlocoTipo p, int i);
void ppBlocoVar(BlocoVar p, int i);
void ppRegraBlocoVar(RegraBlocoVar p, int i);
void ppBlocoComando(BlocoComando p, int i);
void ppRegraComando(RegraComando p, int i);
void ppComando(Comando p, int i);
void ppAtribuicao(Atribuicao p, int i);
void ppSubEscrito(SubEscrito p, int i);
void ppRegraTipo(RegraTipo p, int i);
void ppTipoPrimitivo(TipoPrimitivo p, int i);
void ppValor(Valor p, int i);
void ppTipoDerivado(TipoDerivado p, int i);
void ppPonteiro(Ponteiro p, int i);
void ppVetor(Vetor p, int i);
void ppIf(If p, int i);
void ppWhile(While p, int i);
void ppFor(For p, int i);
void ppGoto(Goto p, int i);
void ppRotulo(Rotulo p, int i);
void ppStruct(Struct p, int i);
void ppDefinicaoCampoStruct(DefinicaoCampoStruct p, int i);
void ppAtribuicaoStruct(AtribuicaoStruct p, int i);
void ppOperadorRelacional(OperadorRelacional p, int i);
void ppOperadorLogico(OperadorLogico p, int i);
void ppOperadorAritmetico(OperadorAritmetico p, int i);
void ppCase(Case p, int i);
void ppRegraSeletor(RegraSeletor p, int i);
void ppSeletor(Seletor p, int i);
void ppChamadaFuncao(ChamadaFuncao p, int i);
void ppListaIdent(ListaIdent p, int i);
void ppFuncao(Funcao p, int i);
void ppProcedimento(Procedimento p, int i);
void ppExpressaoAritmetica(ExpressaoAritmetica p, int i);
void ppOperando(Operando p, int i);
void ppRegraAritmetica(RegraAritmetica p, int i);
void ppExpressaoRelacional(ExpressaoRelacional p, int i);
void ppRegraRelacional(RegraRelacional p, int i);
void ppExpressaoLogica(ExpressaoLogica p, int i);
void ppRegraLogico(RegraLogico p, int i);

char *showEntry(Entry p);
char *showBlocoFuncao(BlocoFuncao p);
char *showBlocoConstante(BlocoConstante p);
char *showRegraBlocoConstante(RegraBlocoConstante p);
char *showBlocoTipo(BlocoTipo p);
char *showRegraBlocoTipo(RegraBlocoTipo p);
char *showBlocoVar(BlocoVar p);
char *showRegraBlocoVar(RegraBlocoVar p);
char *showBlocoComando(BlocoComando p);
char *showRegraComando(RegraComando p);
char *showComando(Comando p);
char *showAtribuicao(Atribuicao p);
char *showSubEscrito(SubEscrito p);
char *showRegraTipo(RegraTipo p);
char *showTipoPrimitivo(TipoPrimitivo p);
char *showValor(Valor p);
char *showTipoDerivado(TipoDerivado p);
char *showPonteiro(Ponteiro p);
char *showVetor(Vetor p);
char *showIf(If p);
char *showWhile(While p);
char *showFor(For p);
char *showGoto(Goto p);
char *showRotulo(Rotulo p);
char *showStruct(Struct p);
char *showDefinicaoCampoStruct(DefinicaoCampoStruct p);
char *showAtribuicaoStruct(AtribuicaoStruct p);
char *showOperadorRelacional(OperadorRelacional p);
char *showOperadorLogico(OperadorLogico p);
char *showOperadorAritmetico(OperadorAritmetico p);
char *showCase(Case p);
char *showRegraSeletor(RegraSeletor p);
char *showSeletor(Seletor p);
char *showChamadaFuncao(ChamadaFuncao p);
char *showListaIdent(ListaIdent p);
char *showFuncao(Funcao p);
char *showProcedimento(Procedimento p);
char *showExpressaoAritmetica(ExpressaoAritmetica p);
char *showOperando(Operando p);
char *showRegraAritmetica(RegraAritmetica p);
char *showExpressaoRelacional(ExpressaoRelacional p);
char *showRegraRelacional(RegraRelacional p);
char *showExpressaoLogica(ExpressaoLogica p);
char *showRegraLogico(RegraLogico p);

void shEntry(Entry p);
void shBlocoFuncao(BlocoFuncao p);
void shBlocoConstante(BlocoConstante p);
void shRegraBlocoConstante(RegraBlocoConstante p);
void shBlocoTipo(BlocoTipo p);
void shRegraBlocoTipo(RegraBlocoTipo p);
void shBlocoVar(BlocoVar p);
void shRegraBlocoVar(RegraBlocoVar p);
void shBlocoComando(BlocoComando p);
void shRegraComando(RegraComando p);
void shComando(Comando p);
void shAtribuicao(Atribuicao p);
void shSubEscrito(SubEscrito p);
void shRegraTipo(RegraTipo p);
void shTipoPrimitivo(TipoPrimitivo p);
void shValor(Valor p);
void shTipoDerivado(TipoDerivado p);
void shPonteiro(Ponteiro p);
void shVetor(Vetor p);
void shIf(If p);
void shWhile(While p);
void shFor(For p);
void shGoto(Goto p);
void shRotulo(Rotulo p);
void shStruct(Struct p);
void shDefinicaoCampoStruct(DefinicaoCampoStruct p);
void shAtribuicaoStruct(AtribuicaoStruct p);
void shOperadorRelacional(OperadorRelacional p);
void shOperadorLogico(OperadorLogico p);
void shOperadorAritmetico(OperadorAritmetico p);
void shCase(Case p);
void shRegraSeletor(RegraSeletor p);
void shSeletor(Seletor p);
void shChamadaFuncao(ChamadaFuncao p);
void shListaIdent(ListaIdent p);
void shFuncao(Funcao p);
void shProcedimento(Procedimento p);
void shExpressaoAritmetica(ExpressaoAritmetica p);
void shOperando(Operando p);
void shRegraAritmetica(RegraAritmetica p);
void shExpressaoRelacional(ExpressaoRelacional p);
void shRegraRelacional(RegraRelacional p);
void shExpressaoLogica(ExpressaoLogica p);
void shRegraLogico(RegraLogico p);

void ppInteger(Integer n, int i);
void ppDouble(Double d, int i);
void ppChar(Char c, int i);
void ppString(String s, int i);
void ppIdent(String s, int i);
void shInteger(Integer n);
void shDouble(Double d);
void shChar(Char c);
void shString(String s);
void shIdent(String s);
void bufAppendS(const char *s);
void bufAppendC(const char c);
void bufReset(void);
void resizeBuffer(void);

#endif

